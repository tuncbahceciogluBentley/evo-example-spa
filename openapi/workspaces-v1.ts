/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/workspace/admin/orgs/{org_id}/action/bulk_assign_roles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Bulk assign roles
         * @description Assign multiple users a role in a workspace in a single request. Admin endpoints allow organization admin users to access any workspace, regardless of their role or lack thereof within the workspace.
         */
        post: operations["bulk_assign_roles_admin"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspace/admin/orgs/{org_id}/action/update_ml_enablement": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Update ML enablements
         * @description Update ML (machine learning) enablement status for a group of given workspaces. Admin endpoints allow organization admin users to access any workspace, regardless of their role or lack thereof within the workspace.
         */
        post: operations["update_ml_enablement_admin"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspace/admin/orgs/{org_id}/settings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get organization settings
         * @description Returns org settings, provided your user has access to the org.
         */
        get: operations["get_organization_settings"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspace/admin/orgs/{org_id}/users/{user_id}/workspaces": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List user workspaces
         * @description Returns a list of all workspaces that a specified user has a role i. Admin endpoints allow organization admin users to access any workspace, regardless of their role or lack thereof within the workspace..
         */
        get: operations["list_user_workspaces_admin"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspace/admin/orgs/{org_id}/workspaces": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List workspaces
         * @description Get a list of all workspaces. Admin endpoints allow organization admin users to access any workspace, regardless of their role or lack thereof within the workspace.
         */
        get: operations["list_workspaces_admin"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspace/admin/orgs/{org_id}/workspaces/{workspace_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get workspace
         * @description Get a workspace by its ID. Admin endpoints allow organization admin users to access any workspace, regardless of their role or lack thereof within the workspace.
         */
        get: operations["get_workspace_admin"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspace/admin/orgs/{org_id}/workspaces/{workspace_id}/thumbnail": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get thumbnail
         * @description Returns the thumbnail image for a specified workspace. Admin endpoints allow organization admin users to access any workspace, regardless of their role or lack thereof within the workspace.
         */
        get: operations["get_thumbnail_admin"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspace/admin/orgs/{org_id}/workspaces/{workspace_id}/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List users
         * @description List all users and their roles within a workspace. Admin endpoints allow organization admin users to access any workspace, regardless of their role or lack thereof within the workspace.
         */
        get: operations["list_user_roles_admin"];
        put?: never;
        /**
         * Assign user role
         * @description Assigns a user a role in a workspace. Admin endpoints allow organization admin users to access any workspace, regardless of their role or lack thereof within the workspace.
         */
        post: operations["assign_user_role_admin"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspace/admin/orgs/{org_id}/workspaces/{workspace_id}/users/{user_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Remove user from workspace
         * @description Removes a user's role from a workspace. Admin endpoints allow organization admin users to access any workspace, regardless of their role or lack thereof within the workspace.
         */
        delete: operations["delete_user_role_admin"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspace/evo/identity/v1/discovery": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** V1 Discovery */
        get: operations["v1_discovery_workspace_evo_identity_v1_discovery_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspace/evo/identity/v1/token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** V1 Token */
        get: operations["v1_token_workspace_evo_identity_v1_token_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspace/evo/identity/v2/discovery": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** V2 Discovery */
        get: operations["v2_discovery_workspace_evo_identity_v2_discovery_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspace/evo/identity/v2/license-access": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * V2 License Access
         * @description Verify the user and token has access to the requested resources.
         *
         *     Given a user token, verify that the user has access to the requested
         *     service, org and hub, as well as that the token as the required scope.
         *
         *     On success, returns details of the calling user, what they are entitled
         *     to, and the authorization the request was made with.
         *
         *     Args:
         *         org_id (UUID): UUID of the Evo organisation
         *         service (str): service name (i.e. "blockmodel")
         *         hub (str): the hub code
         *         required_scope(str): scope required for the service
         *     Returns:
         *         A JSON response.
         */
        get: operations["v2_license_access_workspace_evo_identity_v2_license_access_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspace/health_check": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Health check
         * @description Checks if the service is healthy and able to response to requests
         */
        get: operations["health_check_workspace_health_check_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspace/openapi.json": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get OpenAPI schema
         * @description Returns the OpenAPI schema for the Workspace Service API.
         */
        get: operations["openapi_spec"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspace/orgs/{org_id}/coordinate_systems": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List coordinate systems
         * @description Returns a list of coordinate systems for an organization.
         */
        get: operations["list_coordinate_systems"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspace/orgs/{org_id}/members": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List instance users
         * @description Returns a paginated list of all users with access to the Evo instance
         */
        get: operations["list_instance_users"];
        put?: never;
        /**
         * Add user to instance
         * @description Add user to the Evo instance
         */
        post: operations["add_instance_users"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspace/orgs/{org_id}/members/roles": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List instance user roles
         * @description List all roles in the Evo instance
         */
        get: operations["list_instance_user_roles"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspace/orgs/{org_id}/members/{user_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Remove instance user
         * @description Remove a user from the Evo instance
         */
        delete: operations["remove_instance_user"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspace/orgs/{org_id}/workspaces": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List workspaces
         * @description Returns a paginated list of all workspaces that you have a role to access in your organization. For a list of all workspaces regardless of your user role, see the 'Admin' equivalent API.
         */
        get: operations["list_workspaces"];
        put?: never;
        /**
         * Create workspace
         * @description Creates a new workspace in your organization.
         */
        post: operations["create_workspace"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspace/orgs/{org_id}/workspaces/{workspace_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get workspace
         * @description Returns a workspace by its ID, provided your user has a role to access it. To retrieve a workspace by ID regardless of your user role, see the 'Admin' equivalent API.
         */
        get: operations["get_workspace"];
        put?: never;
        /**
         * Restore a deleted workspace
         * @description If a workspace has been soft deleted, this API allows you to restore it again. After restoring, the workspace will no longer be included in "get workspace" and "list workspace" when the `deleted=true` parameter is appended to your request parameters.
         */
        post: operations["restore_soft_deleted_workspace"];
        /**
         * Delete workspace
         * @description Deletes a workspace. Use of this API requires an "owner" role in the workspace. Deleted workspaces will no longer be returned in "get workspace" and "list workspace" requests, however you can include them by appending `deleted=true` to your request parameters.
         */
        delete: operations["delete_workspace"];
        options?: never;
        head?: never;
        /**
         * Update workspace
         * @description Updates a workspace.
         */
        patch: operations["update_workspace"];
        trace?: never;
    };
    "/workspace/orgs/{org_id}/workspaces/{workspace_id}/current-user-role": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get current user role
         * @description Returns your user account's role in a workspace.
         */
        get: operations["get_current_user_role"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspace/orgs/{org_id}/workspaces/{workspace_id}/thumbnail": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get thumbnail for workspace
         * @description Returns the thumbnail image for a workspace.
         */
        get: operations["get_thumbnail"];
        /**
         * Upload thumbnail for workspace
         * @description Upload a new thumbnail image for a workspace.
         */
        put: operations["put_thumbnail"];
        post?: never;
        /**
         * Delete thumbnail for workspace
         * @description Deletes the thumbnail image for a workspace.
         */
        delete: operations["delete_workspace_thumbnail"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspace/orgs/{org_id}/workspaces/{workspace_id}/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List users
         * @description Returns a list of all users with a role in a workspace.
         */
        get: operations["list_user_roles"];
        put?: never;
        /**
         * Assign user role
         * @description Assigns a user a role in a workspace.
         */
        post: operations["assign_user_role"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/workspace/orgs/{org_id}/workspaces/{workspace_id}/users/{user_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Remove user from workspace
         * @description Removes a user by removing their role from the workspace.
         */
        delete: operations["delete_user_role"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** AddInstanceUsersRequest */
        AddInstanceUsersRequest: {
            /** Users */
            users: components["schemas"]["UserRoleMapping"][];
        };
        /** AddInstanceUsersResponse */
        AddInstanceUsersResponse: {
            /** Invitations */
            invitations: components["schemas"]["BaseInstanceUserInvitationResponse"][];
            /** Members */
            members: components["schemas"]["BaseInstanceUserResponse"][];
        };
        /** AssignRoleRequest */
        AssignRoleRequest: components["schemas"]["UserRole"] | components["schemas"]["UserRoleViaEmail"];
        /** BaseInstanceUserInvitationResponse */
        BaseInstanceUserInvitationResponse: {
            /**
             * Created Date
             * Format: date-time
             */
            created_date: string;
            /** Email */
            email: string;
            /**
             * Expiration Date
             * Format: date-time
             */
            expiration_date: string;
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Invited By Email */
            invited_by_email: string;
            /** Roles */
            roles: components["schemas"]["BaseInstanceUserRoleResponse"][];
            /** Status */
            status: string;
        };
        /** BaseInstanceUserResponse */
        BaseInstanceUserResponse: {
            /** Email */
            email: string;
            /** Full Name */
            full_name: string;
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Roles */
            roles: components["schemas"]["BaseInstanceUserRoleResponse"][];
        };
        /** BaseInstanceUserRoleResponse */
        BaseInstanceUserRoleResponse: {
            /** Description */
            description: string;
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Name */
            name: string;
        };
        /** BoundingBox */
        BoundingBox: {
            /** Coordinates */
            coordinates: (number)[][][];
            type: components["schemas"]["GeometryTypeEnum"];
        };
        /** BulkUserRoleAssignmentsRequest */
        BulkUserRoleAssignmentsRequest: {
            /** Role Assignments */
            role_assignments: components["schemas"]["UserRoleAssignmentRequest"][];
        };
        /** CoordinateSystemCategory */
        CoordinateSystemCategory: {
            /** Items */
            items: (components["schemas"]["CoordinateSystemCategory"] | components["schemas"]["CoordinateSystemEntry"])[];
            /** Title */
            title: string;
        };
        /** CoordinateSystemEntry */
        CoordinateSystemEntry: {
            /** Title */
            title: string;
            /** Well Known Id */
            well_known_id: string;
        };
        /** CreateWorkspaceRequest */
        CreateWorkspaceRequest: {
            bounding_box?: components["schemas"]["BoundingBox"] | null;
            /**
             * Default Coordinate System
             * @default
             */
            default_coordinate_system: string;
            /**
             * Description
             * @default
             */
            description: string;
            /**
             * Labels
             * @description A list of labels
             */
            labels?: string[] | null;
            /**
             * Name
             * @description The name of the workspace, unique within an organization and hub
             */
            name: string;
        };
        /** DiscoveryResponse */
        DiscoveryResponse: {
            discovery: components["schemas"]["DiscoveryResponseContent"];
        };
        /** DiscoveryResponseContent */
        DiscoveryResponseContent: {
            /** Hubs */
            hubs: components["schemas"]["Hub"][];
            /** Organizations */
            organizations: components["schemas"]["Organization"][];
            /** Service Access */
            service_access: components["schemas"]["ServiceAccess"][];
            /** Services */
            services: components["schemas"]["Service"][];
        };
        /** ErrorInvalidParam */
        ErrorInvalidParam: {
            /** Name */
            name: string;
            /** Reason */
            reason: string;
        };
        /** ErrorResponse */
        ErrorResponse: {
            /** Detail */
            detail: string | null;
            /** Invalid-Params */
            "invalid-params"?: components["schemas"]["ErrorInvalidParam"][] | null;
            /** Status */
            status: number;
            /** Title */
            title: string;
            /** Type */
            type: string;
        };
        /**
         * GeometryTypeEnum
         * @enum {string}
         */
        GeometryTypeEnum: "Polygon";
        /** Hub */
        Hub: {
            /** Code */
            code: string;
            /** Display Name */
            display_name: string;
            /** Url */
            url: string;
        };
        /** InstanceRoleWithPermissions */
        InstanceRoleWithPermissions: {
            /** Description */
            description: string;
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Name */
            name: string;
            /** Permissions */
            permissions: string[];
        };
        /**
         * LicenseAccessAuthDetails
         * @description Auth details,retrieved from token, for v2 License Access Response
         */
        LicenseAccessAuthDetails: {
            /** Client Id */
            client_id: string;
            /** Exp */
            exp: number;
            /** Iat */
            iat: number;
            /** Iss */
            iss: string | null;
            /** Jti */
            jti: string | null;
            /** Scope */
            scope: string[] | null;
            /** Sid */
            sid: string | null;
            /** Type */
            type: string;
            /** Ver */
            ver: string;
        };
        /**
         * LicenseAccessEntitlements
         * @description Entitlement details for v2 License Access Response
         */
        LicenseAccessEntitlements: {
            /** Hub Code */
            hub_code: string;
            /** Org Id */
            org_id: string;
            /** Org Name */
            org_name: string;
            /** Roles */
            roles: string[];
            /** Services */
            services: string[];
        };
        /**
         * LicenseAccessResponseModel
         * @description v2 License Access Response
         */
        LicenseAccessResponseModel: {
            auth_details: components["schemas"]["LicenseAccessAuthDetails"];
            entitlements: components["schemas"]["LicenseAccessEntitlements"];
            user: components["schemas"]["LicenseAccessUser"];
        };
        /**
         * LicenseAccessUser
         * @description User details for v2 License Access Response
         */
        LicenseAccessUser: {
            /** Org Id */
            org_id: string;
            /** Org Name */
            org_name: string | null;
            /** Sub */
            sub: string;
        };
        /** ListCoordinateSystemsResponse */
        ListCoordinateSystemsResponse: {
            /** Links */
            links: {
                [key: string]: string | null;
            };
            /** Results */
            results: components["schemas"]["CoordinateSystemCategory"][];
        };
        /** ListInstanceRolesResponse */
        ListInstanceRolesResponse: {
            /** Roles */
            roles: components["schemas"]["InstanceRoleWithPermissions"][];
        };
        /** ListInstanceUsersResponse */
        ListInstanceUsersResponse: {
            links: components["schemas"]["PaginationLinksWithoutTotal"];
            /** Results */
            results: components["schemas"]["BaseInstanceUserResponse"][];
        };
        /** ListUserRoleResponse */
        ListUserRoleResponse: {
            /** Links */
            links: {
                [key: string]: string | null;
            };
            /** Results */
            results: components["schemas"]["User"][];
        };
        /** ListUserWorkspacesResponse */
        ListUserWorkspacesResponse: {
            links: components["schemas"]["PaginationLinks"];
            /** Results */
            results: components["schemas"]["UserWorkspaceResponse"][];
        };
        /** ListWorkspacesResponse */
        ListWorkspacesResponse: {
            links: components["schemas"]["PaginationLinks"];
            /** Results */
            results: components["schemas"]["WorkspaceRoleRequiredResponse"][] | components["schemas"]["WorkspaceRoleOptionalResponse"][];
        };
        /** MlEnablementRequest */
        MlEnablementRequest: {
            /** Ml Enablements */
            ml_enablements: components["schemas"]["WorkspaceMlEnablementRequest"][];
        };
        /** Organization */
        Organization: {
            /** Display Name */
            display_name: string;
            /** Id */
            id: string;
        };
        /** OrganizationSettingsFieldResponse */
        OrganizationSettingsFieldResponse: {
            /**
             * Ml Enabled
             * @default false
             */
            ml_enabled: boolean;
        };
        /** OrganizationSettingsResponse */
        OrganizationSettingsResponse: {
            /** Created At */
            created_at?: string | null;
            /** Created By */
            created_by?: string | null;
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** @default {
             *       "ml_enabled": false
             *     } */
            settings: components["schemas"]["OrganizationSettingsFieldResponse"];
            /** Updated At */
            updated_at?: string | null;
            /** Updated By */
            updated_by?: string | null;
        };
        /** PaginationLinks */
        PaginationLinks: {
            /** Count */
            count: number;
            /**
             * First
             * Format: uri
             */
            first: string;
            /**
             * Last
             * Format: uri
             */
            last: string;
            /** Next */
            next?: string | null;
            /** Previous */
            previous?: string | null;
            /** Total */
            total: number;
        };
        /** PaginationLinksWithoutTotal */
        PaginationLinksWithoutTotal: {
            /** Count */
            count: number;
            /**
             * First
             * Format: uri
             */
            first: string;
            /** Next */
            next?: string | null;
            /** Previous */
            previous?: string | null;
        };
        /**
         * RoleEnum
         * @enum {string}
         */
        RoleEnum: "owner" | "editor" | "viewer";
        /** Service */
        Service: {
            /** Code */
            code: string;
            /** Display Name */
            display_name: string;
        };
        /** ServiceAccess */
        ServiceAccess: {
            /** Hub Code */
            hub_code: string;
            /** Org Id */
            org_id: string;
            /** Services */
            services: string[];
        };
        /** UpdateWorkspaceRequest */
        UpdateWorkspaceRequest: {
            bounding_box?: components["schemas"]["BoundingBox"] | null;
            /** Default Coordinate System */
            default_coordinate_system?: string | null;
            /** Description */
            description?: string | null;
            /**
             * Labels
             * @description A list of labels
             */
            labels?: string[] | null;
            /** Name */
            name?: string | null;
        };
        /** User */
        User: {
            /** Email */
            email?: string | null;
            /** Full Name */
            full_name?: string | null;
            role: components["schemas"]["RoleEnum"];
            /**
             * User Id
             * Format: uuid
             */
            user_id: string;
        };
        /** UserModel */
        UserModel: {
            /** Email */
            email?: string | null;
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Name */
            name?: string | null;
        };
        /** UserRole */
        UserRole: {
            role: components["schemas"]["RoleEnum"];
            /**
             * User Id
             * Format: uuid
             */
            user_id: string;
        };
        /** UserRoleAssignmentRequest */
        UserRoleAssignmentRequest: {
            role: components["schemas"]["RoleEnum"];
            /**
             * User Id
             * Format: uuid
             */
            user_id: string;
            /**
             * Workspace Id
             * Format: uuid
             */
            workspace_id: string;
        };
        /** UserRoleMapping */
        UserRoleMapping: {
            /** Email */
            email: string;
            /** Roles */
            roles: string[];
        };
        /** UserRoleViaEmail */
        UserRoleViaEmail: {
            /** Email */
            email: string;
            role: components["schemas"]["RoleEnum"];
        };
        /** UserWorkspaceResponse */
        UserWorkspaceResponse: {
            bounding_box?: components["schemas"]["BoundingBox"] | null;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            created_by: components["schemas"]["UserModel"];
            /**
             * Default Coordinate System
             * @default
             */
            default_coordinate_system: string;
            /**
             * Description
             * @default
             */
            description: string;
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /**
             * Labels
             * @default []
             */
            labels: string[];
            /**
             * Ml Enabled
             * @default false
             */
            ml_enabled: boolean;
            /**
             * Name
             * @description The name of the workspace, unique within an organization and hub
             */
            name: string;
            /**
             * Self Link
             * Format: uri
             */
            self_link: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
            updated_by: components["schemas"]["UserModel"];
            user_role: components["schemas"]["RoleEnum"];
        };
        /** WorkspaceMlEnablementRequest */
        WorkspaceMlEnablementRequest: {
            /** Ml Enabled */
            ml_enabled: boolean;
            /**
             * Workspace Id
             * Format: uuid
             */
            workspace_id: string;
        };
        /** WorkspaceRoleOptionalResponse */
        WorkspaceRoleOptionalResponse: {
            bounding_box?: components["schemas"]["BoundingBox"] | null;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            created_by: components["schemas"]["UserModel"];
            current_user_role?: components["schemas"]["RoleEnum"] | null;
            /**
             * Default Coordinate System
             * @default
             */
            default_coordinate_system: string;
            /**
             * Description
             * @default
             */
            description: string;
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /**
             * Labels
             * @default []
             */
            labels: string[];
            /**
             * Ml Enabled
             * @default false
             */
            ml_enabled: boolean;
            /**
             * Name
             * @description The name of the workspace, unique within an organization and hub
             */
            name: string;
            /**
             * Self Link
             * Format: uri
             */
            self_link: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
            updated_by: components["schemas"]["UserModel"];
        };
        /** WorkspaceRoleRequiredResponse */
        WorkspaceRoleRequiredResponse: {
            bounding_box?: components["schemas"]["BoundingBox"] | null;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            created_by: components["schemas"]["UserModel"];
            current_user_role: components["schemas"]["RoleEnum"];
            /**
             * Default Coordinate System
             * @default
             */
            default_coordinate_system: string;
            /**
             * Description
             * @default
             */
            description: string;
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /**
             * Labels
             * @default []
             */
            labels: string[];
            /**
             * Ml Enabled
             * @default false
             */
            ml_enabled: boolean;
            /**
             * Name
             * @description The name of the workspace, unique within an organization and hub
             */
            name: string;
            /**
             * Self Link
             * Format: uri
             */
            self_link: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
            updated_by: components["schemas"]["UserModel"];
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    bulk_assign_roles_admin: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                org_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BulkUserRoleAssignmentsRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description No permission -- see authorization schemes */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Request forbidden -- authorization will not help */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Resource not found or user lacks access */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Specified method is invalid for this resource */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unexpected error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    update_ml_enablement_admin: {
        parameters: {
            query?: never;
            header?: {
                /** @description Set to "opt-in" to enable adding user by email */
                "preview-api"?: string | null;
            };
            path: {
                org_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MlEnablementRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MlEnablementRequest"];
                };
            };
            /** @description No permission -- see authorization schemes */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Request forbidden -- authorization will not help */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Resource not found or user lacks access */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Specified method is invalid for this resource */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unexpected error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    get_organization_settings: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                org_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrganizationSettingsResponse"];
                };
            };
            /** @description No permission -- see authorization schemes */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Request forbidden -- authorization will not help */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Resource not found or user lacks access */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Specified method is invalid for this resource */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Resource is gone */
            410: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unexpected error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    list_user_workspaces_admin: {
        parameters: {
            query?: {
                /** @description The maximum number of results to return. Limits over 100 are deprecated and will eventually not be supported. */
                limit?: number | null;
                /** @description The (zero-based) offset of the first item returned in the collection. */
                offset?: number | null;
                /**
                 * @deprecated
                 * @description An optional comma separated list of fields to sort the results by. Options are: `name`, `-name`, `created_at`, `-created_at`, `updated_at`, `-updated_at`, `user_role`, `-user_role`.
                 */
                sort?: string | null;
                /** @description An optional, comma-separated list of fields by which to order the results. Each field could be prefixed with an order operator: `asc:` for ascending order or `desc:` for descending order, default is ascending order. The sortable fields are: `name`, `created_at`, `updated_at`, and `user_role`. You can also do compound sorts by comma separating your order params, e.g. `asc:user_role,desc:name`. This will sort by user_role in ascending order and then by name in descending order as a secondary sort. */
                order_by?: string | null;
                /** @description Filter by workspace that a user has created, by user ID. */
                "filter[created_by]"?: string | null;
                /** @description Filter by the time workspace has created. */
                created_at?: string | null;
                /** @description Filter by the latest time workspace was updated. */
                updated_at?: string | null;
                /**
                 * @deprecated
                 * @description Filter by workspace name.
                 */
                "filter[name]"?: string | null;
                /** @description Filter by workspace name. */
                name?: string | null;
                /** @description Include workspaces that have been deleted. */
                deleted?: boolean | null;
            };
            header?: never;
            path: {
                org_id: string;
                user_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListUserWorkspacesResponse"];
                };
            };
            /** @description No permission -- see authorization schemes */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Request forbidden -- authorization will not help */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Resource not found or user lacks access */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Specified method is invalid for this resource */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unexpected error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    list_workspaces_admin: {
        parameters: {
            query?: {
                /** @description The maximum number of results to return. Limits over 100 are deprecated and will eventually not be supported. */
                limit?: number | null;
                /** @description The (zero-based) offset of the first item returned in the collection. */
                offset?: number | null;
                /**
                 * @deprecated
                 * @description An optional comma separated list of fields to sort the results by. Options are: `name`, `-name`, `created_at`, `-created_at`, `updated_at`, `-updated_at`, `user_role`, `-user_role`.
                 */
                sort?: string | null;
                /** @description An optional, comma-separated list of fields by which to order the results. Each field could be prefixed with an order operator: `asc:` for ascending order or `desc:` for descending order, default is ascending order. The sortable fields are: `name`, `created_at`, `updated_at`, and `user_role`. You can also do compound sorts by comma separating your order params, e.g. `asc:user_role,desc:name`. This will sort by user_role in ascending order and then by name in descending order as a secondary sort. */
                order_by?: string | null;
                /** @description Filter by workspace that a user has created, by user ID. */
                "filter[created_by]"?: string | null;
                /** @description Filter by the time workspace has created. */
                created_at?: string | null;
                /** @description Filter by the latest time workspace was updated. */
                updated_at?: string | null;
                /**
                 * @deprecated
                 * @description Filter by workspace name.
                 */
                "filter[name]"?: string | null;
                /** @description Filter by workspace name. */
                name?: string | null;
                /** @description Include workspaces that have been deleted. */
                deleted?: boolean | null;
                /** @description Filter by workspaces that a user ID has access to. */
                "filter[user_id]"?: string | null;
            };
            header?: never;
            path: {
                org_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListWorkspacesResponse"];
                };
            };
            /** @description No permission -- see authorization schemes */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Request forbidden -- authorization will not help */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Resource not found or user lacks access */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Specified method is invalid for this resource */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unexpected error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    get_workspace_admin: {
        parameters: {
            query?: {
                /** @description Only list workspaces that have been deleted. */
                deleted?: boolean;
            };
            header?: never;
            path: {
                org_id: string;
                workspace_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceRoleOptionalResponse"];
                };
            };
            /** @description No permission -- see authorization schemes */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Request forbidden -- authorization will not help */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Resource not found or user lacks access */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Specified method is invalid for this resource */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Resource is gone */
            410: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unexpected error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    get_thumbnail_admin: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workspace_id: string;
                org_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "image/jpeg": string;
                    "image/png": string;
                };
            };
            /** @description No permission -- see authorization schemes */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Request forbidden -- authorization will not help */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Resource not found or user lacks access */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Specified method is invalid for this resource */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unexpected error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    list_user_roles_admin: {
        parameters: {
            query?: {
                /** @description Filter to see the role of a specific user ID. */
                "filter[user_id]"?: string | null;
            };
            header?: never;
            path: {
                workspace_id: string;
                org_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListUserRoleResponse"];
                };
            };
            /** @description No permission -- see authorization schemes */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Request forbidden -- authorization will not help */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Resource not found or user lacks access */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Specified method is invalid for this resource */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Resource is gone */
            410: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unexpected error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    assign_user_role_admin: {
        parameters: {
            query?: never;
            header?: {
                /** @description Set to "opt-in" to enable adding user by email */
                "preview-api"?: string | null;
            };
            path: {
                workspace_id: string;
                org_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AssignRoleRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserRole"];
                };
            };
            /** @description No permission -- see authorization schemes */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Request forbidden -- authorization will not help */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Resource not found or user lacks access */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Specified method is invalid for this resource */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Resource is gone */
            410: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unexpected error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    delete_user_role_admin: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workspace_id: string;
                user_id: string;
                org_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No permission -- see authorization schemes */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Request forbidden -- authorization will not help */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Resource not found or user lacks access */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Specified method is invalid for this resource */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Resource is gone */
            410: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unexpected error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    v1_discovery_workspace_evo_identity_v1_discovery_get: {
        parameters: {
            query?: {
                service?: string[] | null;
            };
            header?: {
                "user-agent"?: string | null;
                origin?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description No permission -- see authorization schemes */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Request forbidden -- authorization will not help */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Resource not found or user lacks access */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Specified method is invalid for this resource */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unexpected error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    v1_token_workspace_evo_identity_v1_token_get: {
        parameters: {
            query?: {
                service?: string | null;
                hub?: string[] | null;
                org_id?: string[] | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description No permission -- see authorization schemes */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Request forbidden -- authorization will not help */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Resource not found or user lacks access */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Specified method is invalid for this resource */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unexpected error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    v2_discovery_workspace_evo_identity_v2_discovery_get: {
        parameters: {
            query?: {
                service?: string[] | null;
            };
            header?: {
                "user-agent"?: string | null;
                origin?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DiscoveryResponse"];
                };
            };
            /** @description No permission -- see authorization schemes */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Request forbidden -- authorization will not help */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Resource not found or user lacks access */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Specified method is invalid for this resource */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unexpected error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    v2_license_access_workspace_evo_identity_v2_license_access_get: {
        parameters: {
            query?: {
                service?: string[] | null;
                hub?: string | null;
                org_id?: string | null;
                required_scope?: string[] | null;
            };
            header?: {
                "tx-uuid"?: string | null;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LicenseAccessResponseModel"];
                };
            };
            /** @description No permission -- see authorization schemes */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Request forbidden -- authorization will not help */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Resource not found or user lacks access */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Specified method is invalid for this resource */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unexpected error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    health_check_workspace_health_check_get: {
        parameters: {
            query?: {
                full?: boolean;
                check_dependencies?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unexpected error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    openapi_spec: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OpenAPI schema */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    list_coordinate_systems: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                org_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListCoordinateSystemsResponse"];
                };
            };
            /** @description No permission -- see authorization schemes */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Request forbidden -- authorization will not help */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Resource not found or user lacks access */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Specified method is invalid for this resource */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unexpected error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    list_instance_users: {
        parameters: {
            query?: {
                /** @description The maximum number of results to return. Limits over 100 are deprecated and will eventually not be supported. */
                limit?: number | null;
                /** @description The (zero-based) offset of the first item returned in the collection. */
                offset?: number | null;
            };
            header?: {
                /** @description Set to "opt-in" to enable adding user by email */
                "preview-api"?: string | null;
            };
            path: {
                org_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListInstanceUsersResponse"];
                };
            };
            /** @description No permission -- see authorization schemes */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Request forbidden -- authorization will not help */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Resource not found or user lacks access */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Specified method is invalid for this resource */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unexpected error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    add_instance_users: {
        parameters: {
            query?: never;
            header?: {
                /** @description Set to "opt-in" to enable adding user by email */
                "preview-api"?: string | null;
            };
            path: {
                org_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AddInstanceUsersRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AddInstanceUsersResponse"];
                };
            };
            /** @description No permission -- see authorization schemes */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Request forbidden -- authorization will not help */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Resource not found or user lacks access */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Specified method is invalid for this resource */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unexpected error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    list_instance_user_roles: {
        parameters: {
            query?: never;
            header?: {
                /** @description Set to "opt-in" to enable adding user by email */
                "preview-api"?: string | null;
            };
            path: {
                org_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListInstanceRolesResponse"];
                };
            };
            /** @description No permission -- see authorization schemes */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Request forbidden -- authorization will not help */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Resource not found or user lacks access */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Specified method is invalid for this resource */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unexpected error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    remove_instance_user: {
        parameters: {
            query?: never;
            header?: {
                /** @description Set to "opt-in" to enable adding user by email */
                "preview-api"?: string | null;
            };
            path: {
                user_id: string;
                org_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No permission -- see authorization schemes */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Request forbidden -- authorization will not help */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Resource not found or user lacks access */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Specified method is invalid for this resource */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unexpected error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    list_workspaces: {
        parameters: {
            query?: {
                /** @description The maximum number of results to return. Limits over 100 are deprecated and will eventually not be supported. */
                limit?: number | null;
                /** @description The (zero-based) offset of the first item returned in the collection. */
                offset?: number | null;
                /**
                 * @deprecated
                 * @description An optional comma separated list of fields to sort the results by. Options are: `name`, `-name`, `created_at`, `-created_at`, `updated_at`, `-updated_at`, `user_role`, `-user_role`.
                 */
                sort?: string | null;
                /** @description An optional, comma-separated list of fields by which to order the results. Each field could be prefixed with an order operator: `asc:` for ascending order or `desc:` for descending order, default is ascending order. The sortable fields are: `name`, `created_at`, `updated_at`, and `user_role`. You can also do compound sorts by comma separating your order params, e.g. `asc:user_role,desc:name`. This will sort by user_role in ascending order and then by name in descending order as a secondary sort. */
                order_by?: string | null;
                /** @description Filter by workspace that a user has created, by user ID. */
                "filter[created_by]"?: string | null;
                /** @description Filter by the time workspace has created. */
                created_at?: string | null;
                /** @description Filter by the latest time workspace was updated. */
                updated_at?: string | null;
                /**
                 * @deprecated
                 * @description Filter by workspace name.
                 */
                "filter[name]"?: string | null;
                /** @description Filter by workspace name. */
                name?: string | null;
                /** @description Include workspaces that have been deleted. */
                deleted?: boolean | null;
                /** @description Filter by workspaces that a user ID has access to. */
                "filter[user_id]"?: string | null;
            };
            header?: never;
            path: {
                org_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListWorkspacesResponse"];
                };
            };
            /** @description No permission -- see authorization schemes */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Request forbidden -- authorization will not help */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Resource not found or user lacks access */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Specified method is invalid for this resource */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unexpected error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    create_workspace: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                org_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateWorkspaceRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceRoleRequiredResponse"];
                };
            };
            /** @description No permission -- see authorization schemes */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Request forbidden -- authorization will not help */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Resource not found or user lacks access */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Specified method is invalid for this resource */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Request conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unexpected error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    get_workspace: {
        parameters: {
            query?: {
                /** @description Only list workspaces that have been deleted. */
                deleted?: boolean;
            };
            header?: never;
            path: {
                org_id: string;
                workspace_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceRoleRequiredResponse"];
                };
            };
            /** @description No permission -- see authorization schemes */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Request forbidden -- authorization will not help */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Resource not found or user lacks access */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Specified method is invalid for this resource */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Resource is gone */
            410: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unexpected error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    restore_soft_deleted_workspace: {
        parameters: {
            query?: {
                deleted?: string | null;
            };
            header?: never;
            path: {
                workspace_id: string;
                org_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Object moved -- see Method and URL list */
            303: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Bad request syntax or unsupported method */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description No permission -- see authorization schemes */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Request forbidden -- authorization will not help */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Resource not found or user lacks access */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Specified method is invalid for this resource */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unexpected error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    delete_workspace: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workspace_id: string;
                org_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No permission -- see authorization schemes */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Request forbidden -- authorization will not help */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Resource not found or user lacks access */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Specified method is invalid for this resource */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unexpected error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    update_workspace: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                org_id: string;
                workspace_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateWorkspaceRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["WorkspaceRoleRequiredResponse"];
                };
            };
            /** @description No permission -- see authorization schemes */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Request forbidden -- authorization will not help */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Resource not found or user lacks access */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Specified method is invalid for this resource */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Request conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unexpected error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    get_current_user_role: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workspace_id: string;
                org_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserRole"];
                };
            };
            /** @description No permission -- see authorization schemes */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Request forbidden -- authorization will not help */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Resource not found or user lacks access */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Specified method is invalid for this resource */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Resource is gone */
            410: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unexpected error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    get_thumbnail: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workspace_id: string;
                org_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "image/jpeg": string;
                    "image/png": string;
                };
            };
            /** @description No permission -- see authorization schemes */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Request forbidden -- authorization will not help */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Resource not found or user lacks access */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Specified method is invalid for this resource */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unexpected error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    put_thumbnail: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workspace_id: string;
                org_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "image/jpeg": string;
                "image/png": string;
            };
        };
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No permission -- see authorization schemes */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Request forbidden -- authorization will not help */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Resource not found or user lacks access */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Specified method is invalid for this resource */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Resource is gone */
            410: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unexpected error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    delete_workspace_thumbnail: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workspace_id: string;
                org_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No permission -- see authorization schemes */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Request forbidden -- authorization will not help */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Resource not found or user lacks access */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Specified method is invalid for this resource */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Resource is gone */
            410: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unexpected error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    list_user_roles: {
        parameters: {
            query?: {
                /** @description Filter to see the role of a specific user ID. */
                "filter[user_id]"?: string | null;
            };
            header?: never;
            path: {
                workspace_id: string;
                org_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListUserRoleResponse"];
                };
            };
            /** @description No permission -- see authorization schemes */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Request forbidden -- authorization will not help */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Resource not found or user lacks access */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Specified method is invalid for this resource */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Resource is gone */
            410: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unexpected error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    assign_user_role: {
        parameters: {
            query?: never;
            header?: {
                /** @description Set to "opt-in" to enable adding user by email */
                "preview-api"?: string | null;
            };
            path: {
                workspace_id: string;
                org_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AssignRoleRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserRole"];
                };
            };
            /** @description No permission -- see authorization schemes */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Request forbidden -- authorization will not help */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Resource not found or user lacks access */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Specified method is invalid for this resource */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Resource is gone */
            410: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unexpected error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    delete_user_role: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                workspace_id: string;
                user_id: string;
                org_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No permission -- see authorization schemes */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Request forbidden -- authorization will not help */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Resource not found or user lacks access */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Specified method is invalid for this resource */
            405: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Resource is gone */
            410: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Unexpected error */
            "5XX": {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
}
