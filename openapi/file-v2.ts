/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/file/v2/orgs/{organisation_id}/workspaces/{workspace_id}/files/{file_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Download a file by ID
         * @description Request file metadata and a delegated download link for a specified file by ID. The `download` link should be followed to download the file contents from blob storage. This link is pre-signed and will expire after 30 minutes. Set the `include_versions` query parameter to `true` to get the complete list of available versions. Set the `version` query parameter to request a download link for that specific version of the specified file. If `version` is not set, the latest version of the file will be returned.
         */
        get: operations["getFileByID"];
        /**
         * Update a file
         * @description Request an upload link for a new version of the specified file.
         *     If the file does not exist an error will be returned.
         *     Follow up a successful request with a call to the returned pre-signed upload link.
         *     Specify a binary body containing the file to upload, with the addition of header key-value pair
         *     `x-ms-blob-type: BlockBlob`.
         *     The upload link is pre-signed and will expire after 30 minutes.
         *
         *     Including a `version_id` parameter allows creating a link to a blob with uncommitted blocks, i.e. the upload has not
         *     been completed properly, or the original pre-signed link has expired.
         *     Uncommitted blocks are valid for up to one week, after which they are automatically deleted.
         *
         *     Including a `deleted` parameter with a value of `false` will restore a deleted file.
         */
        put: operations["updateFileByID"];
        post?: never;
        /**
         * Delete a file by ID
         * @description Request to delete a file. This will delete the file and all historic versions.
         */
        delete: operations["deleteFileByID"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/file/v2/orgs/{organisation_id}/workspaces/{workspace_id}/files/path/{file_path}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Download a file by path
         * @description Request file metadata and a delegated download link for a specified file by path. The `download` link should be followed to download the file contents. This link is pre-signed and will expire after 30 minutes. Set the `include_versions` query parameter to `true` to get the complete list of available versions. Set the `version` query parameter to request a download link for that specific version of the specified file. If `version` is not set, the latest version of the file will be returned.
         */
        get: operations["getFileByPath"];
        /**
         * Upload a file
         * @description Request an upload link for a new version of the specified file.
         *     If the folders in the file path do not exist, they will be created.
         *     If the file already exists, a new version will be created with the updated file content.
         *     Follow up a successful request with a call to the returned pre-signed upload link.
         *     Specify a binary body containing the file to upload, with the addition of header key-value pair
         *     `x-ms-blob-type: BlockBlob`.
         *     The upload link is pre-signed and will expire after 30 minutes.
         *
         *     Including a `version_id` parameter allows creating a link to data with uncommitted blocks, i.e. the upload has not
         *     been completed properly, or the original pre-signed link has expired.
         *     Uncommitted blocks are valid for up to one week, after which they are automatically deleted.
         */
        put: operations["upsertFileByPath"];
        post?: never;
        /**
         * Delete a file by path
         * @description Request to delete a file. This will delete the file and all historic versions.
         */
        delete: operations["deleteFileByPath"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/file/v2/orgs/{organisation_id}/workspaces/{workspace_id}/files": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List folder contents
         * @description Request to list files. The maximum number of results returned is limited to 5000.
         */
        get: operations["listFiles"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** ApiError */
        ApiError: {
            /** Detail */
            detail?: string | null;
            /**
             * Status
             * @default 500
             */
            status: number;
            /**
             * Title
             * @default An Error Occurred.
             */
            title: string;
            /**
             * Type
             * @default https://seequent.com/error-codes/file-api/api-errors
             */
            type: string;
        };
        /** BadGateway */
        BadGateway: {
            /** Detail */
            detail?: string | null;
            /**
             * Status
             * @default 502
             */
            status: number;
            /**
             * Title
             * @default Bad Gateway.
             */
            title: string;
            /**
             * Type
             * @default https://seequent.com/error-codes/file-api/bad-gateway
             */
            type: string;
        };
        /** BadRequestError */
        BadRequestError: {
            /** Detail */
            detail?: string | null;
            /**
             * Status
             * @default 400
             */
            status: number;
            /**
             * Title
             * @default Bad Request.
             */
            title: string;
            /**
             * Type
             * @default https://seequent.com/error-codes/file-api/bad-request
             */
            type: string;
        };
        /**
         * DownloadFileResponse
         * @description Download file response.
         */
        DownloadFileResponse: {
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            created_by?: components["schemas"]["UserInfo"] | null;
            /** Deleted At */
            deleted_at?: string | null;
            deleted_by?: components["schemas"]["UserInfo"] | null;
            /** Download */
            download: string;
            /** Etag */
            etag: string;
            /**
             * File Id
             * Format: uuid
             */
            file_id: string;
            /**
             * Modified At
             * Format: date-time
             */
            modified_at: string;
            modified_by?: components["schemas"]["UserInfo"] | null;
            /** Name */
            name: string;
            /** Path */
            path: string;
            /** Self */
            self: string;
            /** Size */
            size: number;
            /**
             * Version Id
             * Format: int64
             */
            version_id: string;
            /** Versions */
            versions?: components["schemas"]["FileVersionResponse"][] | null;
        };
        /** EvoRequestValidationError */
        EvoRequestValidationError: {
            /** Detail */
            detail?: string | null;
            /**
             * Status
             * @default 422
             */
            status: number;
            /**
             * Title
             * @default Validation Error.
             */
            title: string;
            /**
             * Type
             * @default https://seequent.com/error-codes/file-api/validation
             */
            type: string;
        };
        /** FileAlreadyExistsError */
        FileAlreadyExistsError: {
            /** Detail */
            detail?: string | null;
            /**
             * Status
             * @default 409
             */
            status: number;
            /**
             * Title
             * @default Invalid Request.
             */
            title: string;
            /**
             * Type
             * @default https://seequent.com/error-codes/file-api/files/already-exists
             */
            type: string;
        };
        /** FileDeletedError */
        FileDeletedError: {
            /** Detail */
            detail?: string | null;
            /**
             * Status
             * @default 410
             */
            status: number;
            /**
             * Title
             * @default The file has been deleted
             */
            title: string;
            /**
             * Type
             * @default https://seequent.com/error-codes/file-api/files/gone
             */
            type: string;
        };
        /** FileNotFoundError */
        FileNotFoundError: {
            /** Detail */
            detail?: string | null;
            /**
             * Status
             * @default 404
             */
            status: number;
            /**
             * Title
             * @default File Not Found.
             */
            title: string;
            /**
             * Type
             * @default https://seequent.com/error-codes/file-api/files/not-found
             */
            type: string;
        };
        /** FileUploadCompleteError */
        FileUploadCompleteError: {
            /** Detail */
            detail?: string | null;
            /**
             * Status
             * @default 400
             */
            status: number;
            /**
             * Title
             * @default No file upload in progress
             */
            title: string;
            /**
             * Type
             * @default https://seequent.com/error-codes/file-api/files/no-file-upload-in-progress
             */
            type: string;
        };
        /**
         * FileVersionResponse
         * @description Metadata for specific file version
         */
        FileVersionResponse: {
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            created_by: components["schemas"]["UserInfo"] | null;
            /**
             * File Id
             * Format: uuid
             */
            file_id: string;
            /** Link */
            link: string;
            /** Name */
            name: string;
            /** Path */
            path: string;
            /** Size */
            size: number;
            /**
             * Version Id
             * Format: int64
             */
            version_id: string;
        };
        /** InsufficientRoleError */
        InsufficientRoleError: {
            /** Detail */
            detail?: string | null;
            /**
             * Permitted Roles
             * @default []
             */
            permitted_roles: unknown[];
            /**
             * Status
             * @default 403
             */
            status: number;
            /**
             * Title
             * @default Insufficient Role.
             */
            title: string;
            /**
             * Type
             * @default https://seequent.com/error-codes/file-api/auth/insufficient-role
             */
            type: string;
            /**
             * Your Role
             * @default
             */
            your_role: string;
        };
        /** InvalidPathError */
        InvalidPathError: {
            /** Detail */
            detail?: string | null;
            /**
             * Status
             * @default 400
             */
            status: number;
            /**
             * Title
             * @default Invalid Path.
             */
            title: string;
            /**
             * Type
             * @default https://seequent.com/error-codes/file-api/files/invalid-path
             */
            type: string;
        };
        /** InvalidTokenError */
        InvalidTokenError: {
            /** Detail */
            detail?: string | null;
            /**
             * Status
             * @default 401
             */
            status: number;
            /**
             * Title
             * @default Access Denied.
             */
            title: string;
            /**
             * Type
             * @default https://seequent.com/error-codes/file-api/auth/invalid-token
             */
            type: string;
        };
        /** ListFile */
        ListFile: {
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            created_by: components["schemas"]["UserInfo"] | null;
            /** Deleted At */
            deleted_at?: string | null;
            deleted_by?: components["schemas"]["UserInfo"] | null;
            /** Etag */
            etag: string;
            /**
             * File Id
             * Format: uuid
             */
            file_id: string;
            links: components["schemas"]["ListFileLinks"];
            /**
             * Modified At
             * Format: date-time
             */
            modified_at: string;
            modified_by: components["schemas"]["UserInfo"] | null;
            /** Name */
            name: string;
            /** Path */
            path: string;
            /** Size */
            size: number;
            /**
             * Version Id
             * Format: int64
             */
            version_id: string;
        };
        /** ListFileLinks */
        ListFileLinks: {
            /** Self */
            self: string;
        };
        /**
         * ListFilesResponse
         * @description List files.
         */
        ListFilesResponse: {
            /** Count */
            count: number;
            /** Files */
            files: components["schemas"]["ListFile"][];
            /** Limit */
            limit: number;
            links: components["schemas"]["ListFilesResponseLinks"];
            /** Offset */
            offset: number;
            /** Total */
            total: number;
        };
        /** ListFilesResponseLinks */
        ListFilesResponseLinks: {
            /** Next */
            next: string | null;
            /** Prev */
            prev: string | null;
            /** Self */
            self: string;
        };
        /** MetadataStoreError */
        MetadataStoreError: {
            /** Detail */
            detail?: string | null;
            /**
             * Status
             * @default 502
             */
            status: number;
            /**
             * Title
             * @default File Metadata Storage Operation Failed.
             */
            title: string;
            /**
             * Type
             * @default https://seequent.com/error-codes/file-api/metadata/store-error
             */
            type: string;
        };
        /** MissingTokenError */
        MissingTokenError: {
            /** Detail */
            detail?: string | null;
            /**
             * Status
             * @default 401
             */
            status: number;
            /**
             * Title
             * @default Access Denied.
             */
            title: string;
            /**
             * Type
             * @default https://seequent.com/error-codes/file-api/auth/missing-token
             */
            type: string;
        };
        /**
         * UploadFileResponse
         * @description Upload file response
         */
        UploadFileResponse: {
            /**
             * File Id
             * Format: uuid
             */
            file_id: string;
            /** Upload */
            upload: string;
            /**
             * Version Id
             * Format: int64
             */
            version_id: string;
        };
        /** UserInfo */
        UserInfo: {
            /**
             * Email Address
             * @description The primary email address of the user. Can be null if an error occurred while retrieving this information.
             */
            email?: string | null;
            /**
             * User ID
             * Format: uuid
             * @description The ID of the user
             */
            id: string;
            /**
             * Full Name
             * @description The full name of the user. Can be null if an error occurred while retrieving this information.
             */
            name?: string | null;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    getFileByID: {
        parameters: {
            query?: {
                /** @description Optional version ID for the desired file version. By default, the response will return the _latest_ version. */
                version_id?: string | null;
                /** @description Optional inclusion of the `DownloadFile.versions`. By default, the response will return `versions` as `null`. */
                include_versions?: boolean;
                /** @description Optional flag to include deleted files. By default, the response will not include deleted files. */
                deleted?: boolean;
            };
            header?: never;
            path: {
                /** @description UUID of a file. */
                file_id: string;
                /** @description The customer's organisation organisation ID. */
                organisation_id: string;
                /** @description The ID of the workspace in the organization. */
                workspace_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description An object containing file metadata and at least one download link. Optionally, the object will also contain a link for each file version. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DownloadFileResponse"];
                };
            };
            /** @description
             *     #### /file-api/bad-request
             *
             *     Bad request. The server cannot or will not process the request due to a client error.
             *
             *      */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestError"];
                };
            };
            /** @description
             *     #### /file-api/auth/missing-token
             *
             *     Unauthorized. The client request has not been completed as the provided credentials  are invalid.
             *
             *
             *     #### /file-api/auth/invalid-token
             *
             *     Forbidden. The client credentials are valid but do not permit access to this resource.
             *
             *      */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MissingTokenError"] | components["schemas"]["InvalidTokenError"];
                };
            };
            /** @description
             *     #### /file-api/auth/insufficient-role
             *
             *     Forbidden. The client credentials are valid but the client does not have a sufficient role to access to this resource.
             *
             *      */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InsufficientRoleError"];
                };
            };
            /** @description
             *     #### /file-api/files/not-found
             *
             *     File or version not found.
             *
             *      */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FileNotFoundError"];
                };
            };
            /** @description
             *     #### /file-api/files/gone
             *
             *     File has been deleted.
             *
             *      */
            410: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FileDeletedError"];
                };
            };
            /** @description
             *     #### /file-api/validation
             *
             *     The request was invalid and will not be processed due to a client error.
             *
             *      */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EvoRequestValidationError"];
                };
            };
            /** @description
             *     #### /file-api/api-errors
             *
             *     A server error has occurred.
             *
             *      */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description
             *     #### /file-api/bad-gateway
             *
             *     Bad gateway. A response required to handle the request is invalid.
             *
             *      */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadGateway"];
                };
            };
        };
    };
    updateFileByID: {
        parameters: {
            query?: {
                /** @description (Optional) version ID to fetch a link for. */
                version_id?: string | null;
                /** @description When set to false, the operation will attempt to restore a deleted file. */
                deleted?: boolean;
            };
            header?: never;
            path: {
                file_id: string;
                /** @description The customer's organisation organisation ID. */
                organisation_id: string;
                /** @description The ID of the workspace in the organization. */
                workspace_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description An object containing a pre-signed upload link. Submit the file content to the link. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UploadFileResponse"];
                };
            };
            /** @description The file has been restored. The location of the resource has not changed. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The file has been restored. Location of the resource has changed (e.g., rename on restore). */
            303: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DownloadFileResponse"];
                };
            };
            /** @description
             *     #### /file-api/bad-request
             *
             *     Bad request. The server cannot or will not process the request due to a client error.
             *
             *      */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestError"];
                };
            };
            /** @description
             *     #### /file-api/auth/missing-token
             *
             *     Unauthorized. The client request has not been completed as the provided credentials  are invalid.
             *
             *
             *     #### /file-api/auth/invalid-token
             *
             *     Forbidden. The client credentials are valid but do not permit access to this resource.
             *
             *      */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MissingTokenError"] | components["schemas"]["InvalidTokenError"];
                };
            };
            /** @description
             *     #### /file-api/auth/insufficient-role
             *
             *     Forbidden. The client credentials are valid but the client does not have a sufficient role to access to this resource.
             *
             *      */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InsufficientRoleError"];
                };
            };
            /** @description
             *     #### /file-api/files/not-found
             *
             *     File does not exist.
             *
             *      */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FileNotFoundError"];
                };
            };
            /** @description
             *     #### /file-api/files/already-exists
             *
             *     Another file already exists at this path.
             *
             *      */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FileAlreadyExistsError"];
                };
            };
            /** @description
             *     #### /file-api/files/gone
             *
             *     File has been deleted.
             *
             *      */
            410: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FileDeletedError"];
                };
            };
            /** @description
             *     #### /file-api/validation
             *
             *     The request was invalid and will not be processed due to a client error.
             *
             *      */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EvoRequestValidationError"];
                };
            };
            /** @description
             *     #### /file-api/api-errors
             *
             *     A server error has occurred.
             *
             *      */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description
             *     #### /file-api/metadata/store-error
             *
             *     A database error occurred when updating a file.
             *
             *
             *     #### /file-api/bad-gateway
             *
             *     Bad gateway. A response required to handle the request is invalid.
             *
             *      */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MetadataStoreError"] | components["schemas"]["BadGateway"];
                };
            };
        };
    };
    deleteFileByID: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                file_id: string;
                /** @description The customer's organisation organisation ID. */
                organisation_id: string;
                /** @description The ID of the workspace in the organization. */
                workspace_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The file has been deleted. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description
             *     #### /file-api/bad-request
             *
             *     Bad request. The server cannot or will not process the request due to a client error.
             *
             *      */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestError"];
                };
            };
            /** @description
             *     #### /file-api/auth/missing-token
             *
             *     Unauthorized. The client request has not been completed as the provided credentials  are invalid.
             *
             *
             *     #### /file-api/auth/invalid-token
             *
             *     Forbidden. The client credentials are valid but do not permit access to this resource.
             *
             *      */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MissingTokenError"] | components["schemas"]["InvalidTokenError"];
                };
            };
            /** @description
             *     #### /file-api/auth/insufficient-role
             *
             *     Forbidden. The client credentials are valid but the client does not have a sufficient role to access to this resource.
             *
             *      */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InsufficientRoleError"];
                };
            };
            /** @description
             *     #### /file-api/validation
             *
             *     The request was invalid and will not be processed due to a client error.
             *
             *      */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EvoRequestValidationError"];
                };
            };
            /** @description
             *     #### /file-api/api-errors
             *
             *     A server error has occurred.
             *
             *      */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description
             *     #### /file-api/metadata/store-error
             *
             *     A database error occurred when deleting the specified file.
             *
             *
             *     #### /file-api/bad-gateway
             *
             *     Bad gateway. A response required to handle the request is invalid.
             *
             *      */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MetadataStoreError"] | components["schemas"]["BadGateway"];
                };
            };
        };
    };
    getFileByPath: {
        parameters: {
            query?: {
                /** @description Optional version ID for the desired file version. By default, the response will return the _latest_ version. */
                version_id?: string | null;
                /** @description Optional inclusion of the `DownloadFile.versions`. By default, the response will return `versions` as `null`. */
                include_versions?: boolean;
            };
            header?: never;
            path: {
                /** @description Path to the file. */
                file_path: string;
                /** @description The customer's organisation organisation ID. */
                organisation_id: string;
                /** @description The ID of the workspace in the organization. */
                workspace_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description An object containing file metadata and at least one download link. Optionally, the object will also contain a link for each file version. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DownloadFileResponse"];
                };
            };
            /** @description
             *     #### /file-api/files/invalid-path
             *
             *     Invalid request path.
             *
             *
             *     #### /file-api/bad-request
             *
             *     Bad request. The server cannot or will not process the request due to a client error.
             *
             *      */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InvalidPathError"] | components["schemas"]["BadRequestError"];
                };
            };
            /** @description
             *     #### /file-api/auth/missing-token
             *
             *     Unauthorized. The client request has not been completed as the provided credentials  are invalid.
             *
             *
             *     #### /file-api/auth/invalid-token
             *
             *     Forbidden. The client credentials are valid but do not permit access to this resource.
             *
             *      */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MissingTokenError"] | components["schemas"]["InvalidTokenError"];
                };
            };
            /** @description
             *     #### /file-api/auth/insufficient-role
             *
             *     Forbidden. The client credentials are valid but the client does not have a sufficient role to access to this resource.
             *
             *      */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InsufficientRoleError"];
                };
            };
            /** @description
             *     #### /file-api/files/not-found
             *
             *     File or version not found.
             *
             *      */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FileNotFoundError"];
                };
            };
            /** @description
             *     #### /file-api/files/gone
             *
             *     File has been deleted.
             *
             *      */
            410: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FileDeletedError"];
                };
            };
            /** @description
             *     #### /file-api/validation
             *
             *     The request was invalid and will not be processed due to a client error.
             *
             *      */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EvoRequestValidationError"];
                };
            };
            /** @description
             *     #### /file-api/api-errors
             *
             *     A server error has occurred.
             *
             *      */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description
             *     #### /file-api/bad-gateway
             *
             *     Bad gateway. A response required to handle the request is invalid.
             *
             *      */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadGateway"];
                };
            };
        };
    };
    upsertFileByPath: {
        parameters: {
            query?: {
                /** @description (Optional) version ID to fetch a link for. */
                version_id?: string | null;
            };
            header?: never;
            path: {
                /** @description Path to the file. */
                file_path: string;
                /** @description The customer's organisation organisation ID. */
                organisation_id: string;
                /** @description The ID of the workspace in the organization. */
                workspace_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description An object containing a pre-signed upload link. Submit the file content to the link. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UploadFileResponse"];
                };
            };
            /** @description
             *     #### /file-api/files/no-file-upload-in-progress
             *
             *     Unable to complete partial upload. The upload has already been completed.
             *
             *
             *     #### /file-api/bad-request
             *
             *     Bad request. The server cannot or will not process the request due to a client error.
             *
             *      */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FileUploadCompleteError"] | components["schemas"]["BadRequestError"];
                };
            };
            /** @description
             *     #### /file-api/auth/missing-token
             *
             *     Unauthorized. The client request has not been completed as the provided credentials  are invalid.
             *
             *
             *     #### /file-api/auth/invalid-token
             *
             *     Forbidden. The client credentials are valid but do not permit access to this resource.
             *
             *      */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MissingTokenError"] | components["schemas"]["InvalidTokenError"];
                };
            };
            /** @description
             *     #### /file-api/auth/insufficient-role
             *
             *     Forbidden. The client credentials are valid but the client does not have a sufficient role to access to this resource.
             *
             *      */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InsufficientRoleError"];
                };
            };
            /** @description
             *     #### /file-api/files/not-found
             *
             *     Unable to complete partial upload. No file exists by this name.
             *
             *      */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FileNotFoundError"];
                };
            };
            /** @description
             *     #### /file-api/validation
             *
             *     The request was invalid and will not be processed due to a client error.
             *
             *      */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EvoRequestValidationError"];
                };
            };
            /** @description
             *     #### /file-api/api-errors
             *
             *     A server error has occurred.
             *
             *      */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description
             *     #### /file-api/metadata/store-error
             *
             *     A database error occurred when uploading a file.
             *
             *
             *     #### /file-api/bad-gateway
             *
             *     Bad gateway. A response required to handle the request is invalid.
             *
             *      */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MetadataStoreError"] | components["schemas"]["BadGateway"];
                };
            };
        };
    };
    deleteFileByPath: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Path to the file. */
                file_path: string;
                /** @description The customer's organisation organisation ID. */
                organisation_id: string;
                /** @description The ID of the workspace in the organization. */
                workspace_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The file has been deleted. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description
             *     #### /file-api/bad-request
             *
             *     Bad request. The server cannot or will not process the request due to a client error.
             *
             *      */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestError"];
                };
            };
            /** @description
             *     #### /file-api/auth/missing-token
             *
             *     Unauthorized. The client request has not been completed as the provided credentials  are invalid.
             *
             *
             *     #### /file-api/auth/invalid-token
             *
             *     Forbidden. The client credentials are valid but do not permit access to this resource.
             *
             *      */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MissingTokenError"] | components["schemas"]["InvalidTokenError"];
                };
            };
            /** @description
             *     #### /file-api/auth/insufficient-role
             *
             *     Forbidden. The client credentials are valid but the client does not have a sufficient role to access to this resource.
             *
             *      */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InsufficientRoleError"];
                };
            };
            /** @description
             *     #### /file-api/validation
             *
             *     The request was invalid and will not be processed due to a client error.
             *
             *      */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EvoRequestValidationError"];
                };
            };
            /** @description
             *     #### /file-api/api-errors
             *
             *     A server error has occurred.
             *
             *      */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description
             *     #### /file-api/metadata/store-error
             *
             *     A database error occurred when deleting the specified file.
             *
             *
             *     #### /file-api/bad-gateway
             *
             *     Bad gateway. A response required to handle the request is invalid.
             *
             *      */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MetadataStoreError"] | components["schemas"]["BadGateway"];
                };
            };
        };
    };
    listFiles: {
        parameters: {
            query?: {
                /** @description The number of results to return. */
                limit?: number;
                /** @description The number of results to skip. */
                offset?: number;
                /** @description When true, only files that have been deleted will be returned */
                deleted?: boolean;
                /** @description The ID of the author to filter on. */
                author?: string | null;
                /** @description The name of the file to filter on. Will perform a case insensitive partial match, so the query `file_name=gold` will match a file with the name `allgoldcolumns.csv`. */
                file_name?: string | null;
                /** @description A date or dates (max 2) to filter files by. Dates may contain operator prefixes, in the form `<operator>:<datetime>`. The following operators are available (`lt`=less than, `lte`=less than or equal to, `gt`=greater than, `gte`=greater than or equal to).If you omit the operator, then it is assumed the operator is 'equal to'. In this case you may only supply one date. The dates must also be in a valid ISO 8601 format.Dates may include a UTC offset. If the offset is omitted, the timezone is assumed to be UTC. */
                created_at?: string[] | null;
                /** @description The ID of the last person to modify the file to filter on. */
                modified_by?: string | null;
                /** @description A date or dates (max 2) to filter files by. Dates may contain operator prefixes, in the form `<operator>:<datetime>`. The following operators are available (`lt`=less than, `lte`=less than or equal to, `gt`=greater than, `gte`=greater than or equal to).If you omit the operator, then it is assumed the operator is 'equal to'. In this case you may only supply one date. The dates must also be in a valid ISO 8601 format.Dates may include a UTC offset. If the offset is omitted, the timezone is assumed to be UTC. */
                modified_at?: string[] | null;
                /** @description The UUID of the user that deleted a file */
                deleted_by?: string | null;
                /** @description A date or dates (max 2) to filter files by. Dates may contain operator prefixes, in the form `<operator>:<datetime>`. The following operators are available (`lt`=less than, `lte`=less than or equal to, `gt`=greater than, `gte`=greater than or equal to).If you omit the operator, then it is assumed the operator is 'equal to'. In this case you may only supply one date. The dates must also be in a valid ISO 8601 format.Dates may include a UTC offset. If the offset is omitted, the timezone is assumed to be UTC. */
                deleted_at?: string[] | null;
                /** @description A comma separated list of fields to order by, where the default sort order is ascending. To specify the sort order, prefix the field name with either `asc:` or `desc:` for ascending or descending respectively. Field names can be one of the following known sort fields: `created_at`, `modified_at`, `deleted_at` */
                order_by?: string;
            };
            header?: never;
            path: {
                /** @description The customer's organisation organisation ID. */
                organisation_id: string;
                /** @description The ID of the workspace in the organization. */
                workspace_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of files */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListFilesResponse"];
                };
            };
            /** @description
             *     #### /file-api/files/invalid-path
             *
             *     Invalid request path.
             *
             *
             *     #### /file-api/bad-request
             *
             *     Bad request. The server cannot or will not process the request due to a client error.
             *
             *      */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InvalidPathError"] | components["schemas"]["BadRequestError"];
                };
            };
            /** @description
             *     #### /file-api/auth/missing-token
             *
             *     Unauthorized. The client request has not been completed as the provided credentials  are invalid.
             *
             *
             *     #### /file-api/auth/invalid-token
             *
             *     Forbidden. The client credentials are valid but do not permit access to this resource.
             *
             *      */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MissingTokenError"] | components["schemas"]["InvalidTokenError"];
                };
            };
            /** @description
             *     #### /file-api/auth/insufficient-role
             *
             *     Forbidden. The client credentials are valid but the client does not have a sufficient role to access to this resource.
             *
             *      */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InsufficientRoleError"];
                };
            };
            /** @description
             *     #### /file-api/validation
             *
             *     The request was invalid and will not be processed due to a client error.
             *
             *      */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EvoRequestValidationError"];
                };
            };
            /** @description
             *     #### /file-api/api-errors
             *
             *     A server error has occurred.
             *
             *      */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description
             *     #### /file-api/metadata/store-error
             *
             *     A database error occurred when listing files.
             *
             *
             *     #### /file-api/bad-gateway
             *
             *     Bad gateway. A response required to handle the request is invalid.
             *
             *      */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MetadataStoreError"] | components["schemas"]["BadGateway"];
                };
            };
        };
    };
}
