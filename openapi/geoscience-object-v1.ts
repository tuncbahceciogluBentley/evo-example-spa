/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/geoscience-object/orgs/{org_id}/objects": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List geoscience objects by org
         * @description The response will list geoscience objects for the provided organisation ID.
         */
        get: operations["listObjectsByOrg"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/geoscience-object/orgs/{org_id}/stages": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the list of available stages
         * @description The response will list available stages for the provided organisation.
         */
        get: operations["listStages"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/geoscience-object/orgs/{org_id}/workspaces/{workspace_id}/data": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Upload geoscience data
         * @description Request to upload geoscience data.
         *
         *     The client provides names for the data they intend to upload and receives upload URLs for those that have not already
         *     been uploaded. This data `name` must a valid SHA256 hash or UUID. Calculating the SHA256 hash is recommended as it
         *     enables clients to avoid re-uploading duplicate data.
         *
         *     Each upload URL is secured with a SAS token and is valid for a limited time. If a URL has expired before the data upload
         *     is complete, simply repeat this request to obtain a new URL.
         *     Clients can use the new URL to continue uploading where they left off.
         *
         *     Multiple data names can be provided, with an upload URL generated for each data digest individually
         *     (up to a maximum of 32).
         */
        put: operations["putDataInWorkspace"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/geoscience-object/orgs/{org_id}/workspaces/{workspace_id}/objects/{object_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Download a geoscience object by UUID
         * @description Download a geoscience object with the provided UUID. If required, the object can be compressed, currently gzip compression is supported. To receive a compressed payload set header `Accept-Encoding: gzip`.
         */
        get: operations["getObjectById"];
        put?: never;
        /**
         * Update a geoscience object
         * @description Update or restore a geoscience object by UUID.
         *     Uploading an object to this endpoint will update (replace, i.e. no partial updates) the existing object with a corresponding UUID.
         *     If the object was previously deleted, and the `deleted` parameter is set to `false`, this operation will attempt to restore the object. You cannot provide an object body when attempting to restore an object.
         *     Note that the value of the `uuid` field in the object must match the value in the URL path.
         *     New objects must be uploaded by path.
         */
        post: operations["updateObjectsById"];
        /**
         * Soft delete a geoscience object
         * @description Delete a geoscience object by UUID.
         *     Deleting an object to this endpoint will soft delete the existing object with a
         *     corresponding UUID.
         *     Note that the value of the `uuid` field in the object must match the value in the URL path.
         */
        delete: operations["deleteObjectsById"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/geoscience-object/orgs/{org_id}/workspaces/{workspace_id}/objects/path/*": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Download a geoscience object
         * @description Download a geoscience object from the provided path. If required, the object can be compressed, currently gzip compression is supported. To receive a compressed payload set header `Accept-Encoding: gzip`.
         */
        get: operations["getObject"];
        put?: never;
        /**
         * Create a geoscience object
         * @description Create or update a geoscience object.
         *
         *     Upload a geoscience object based on the schema element. Geoscience objects can be stored hierarchically,
         *     by providing the path to the object, including the object name, in the request URL.
         *     A detailed list of the available object schemas can be found in
         *     Seequent's [evo-schemas](https://github.com/seequentevo/evo-schemas) repository.
         *
         *     The submitted properties will be validated against the specified schema properties.
         *
         *     To create a new object, upload it to a unique path with the UUID field set to `null`.
         *     The response will contain a reflection of the uploaded object with a newly assigned object ID.
         *     This can be used for future requests to update the object.
         *
         *     If a version of the geoscience object already exists at the specified path a new version will be created.
         *     To move or rename an existing object, simply upload a new version of it (with the same UUID) to a new, unique path or
         *     file name.
         *
         *     Note that every upload of an object is considered a new version, even if no changes have been made.
         *
         *     If required, the object should be compressed, currently gzip compression is supported.
         *     Set header `Content-Encoding: gzip` if the content is compressed and `Accept-Encoding: gzip` to receive
         *     compressed content.
         */
        post: operations["postObjects"];
        /**
         * Soft delete a geoscience object by path
         * @description Soft delete a geoscience object by path.
         *     This endpoint will mark the object as deleted but won't actually remove it from the database.
         */
        delete: operations["deleteObjectByPath"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/geoscience-object/orgs/{org_id}/workspaces/{workspace_id}/objects": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List geoscience objects
         * @description List geoscience objects. The response will include all geoscience objects matching the given filters.The geoscience objects will be the latest version of the object. If there are no objects matching the given filters, an empty list is returned.
         */
        get: operations["listObjects"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * List the latest version IDs for geoscience objects
         * @description Request to fetch the latest version IDs for a collection of geoscience objects (maximum of 500). The request body must only contain a list of UUIDs of the objects to check. The response will contain a list of objects with their UUIDs and the latest version ID. If the object from a given UUID does not exist or has been deleted, the request will be successful, but the version ID will be `null`.
         */
        patch: operations["listObjectVersionIDs"];
        trace?: never;
    };
    "/geoscience-object/orgs/{org_id}/workspaces/{workspace_id}/objects/{object_id}/metadata": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update metadata for an Object
         * @description Update metadata for a geoscience object version. If a version is not specified, the latest version of the object will be used. Setting the metadata property to `null` will remove the metadata from the object version.
         */
        patch: operations["updateMetadata"];
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** ApiError */
        ApiError: {
            /** Detail */
            detail?: string | null;
            /** @default 500 */
            status: components["schemas"]["HTTPStatus"];
            /**
             * Title
             * @default An Error Occurred.
             */
            title: string;
            /**
             * Type
             * @default https://seequent.com/error-codes/geoscienceobject/api-errors
             */
            type: string;
        };
        /** BadGateway */
        BadGateway: {
            /** Detail */
            detail?: string | null;
            /** @default 502 */
            status: components["schemas"]["HTTPStatus"];
            /**
             * Title
             * @default Bad Gateway.
             */
            title: string;
            /**
             * Type
             * @default https://seequent.com/error-codes/geoscienceobject/bad-gateway
             */
            type: string;
        };
        /** BadRequestError */
        BadRequestError: {
            /** Detail */
            detail?: string | null;
            /** @default 400 */
            status: components["schemas"]["HTTPStatus"];
            /**
             * Title
             * @default Bad Request.
             */
            title: string;
            /**
             * Type
             * @default https://seequent.com/error-codes/geoscienceobject/bad-request
             */
            type: string;
        };
        /**
         * BoundingBox
         * @description The bounding box for a geoscience object, represented by a GeoJSON polygon.
         */
        BoundingBox: {
            /**
             * GeoJSON Polygon Coordinates
             * @description A list containing one exterior ring of a GeoJSON polygon
             */
            coordinates: number[][][];
            /** @default Polygon */
            type: components["schemas"]["GeoJSONType"];
        };
        /** DataDownloadUrl */
        DataDownloadUrl: {
            /** Download Url */
            download_url?: string | null;
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Name */
            name: string;
        };
        /** DataUploadRequestBody */
        DataUploadRequestBody: {
            /**
             * Name
             * @description SHA256 or UUID "name" for the data blob. SHA256 is preferred as it allows other clients to deduplicate data.
             */
            name: string;
        };
        /** DataUploadResponseBody */
        DataUploadResponseBody: {
            /** Exists */
            exists: boolean;
            /**
             * Id
             * Format: uuid
             * @description Server-generated unique identifier for the data
             */
            id: string;
            /**
             * Name
             * @description client-provided name for the data (SHA256 or UUID)
             */
            name: string;
            /** Upload Url */
            upload_url?: string | null;
        };
        /** DataUpstreamError */
        DataUpstreamError: {
            /** Detail */
            detail?: string | null;
            /** @default 502 */
            status: components["schemas"]["HTTPStatus"];
            /**
             * Title
             * @default Data Error.
             */
            title: string;
            /**
             * Type
             * @default https://seequent.com/error-codes/geoscienceobject/data/data-upstream
             */
            type: string;
        };
        /** DataWorkspaceGoneError */
        DataWorkspaceGoneError: {
            /** Detail */
            detail?: string | null;
            /** @default 410 */
            status: components["schemas"]["HTTPStatus"];
            /**
             * Title
             * @default Data Upload Error.
             */
            title: string;
            /**
             * Type
             * @default https://seequent.com/error-codes/geoscienceobject/data/gone
             */
            type: string;
        };
        /** DataWorkspaceNotFoundError */
        DataWorkspaceNotFoundError: {
            /** Detail */
            detail?: string | null;
            /** @default 404 */
            status: components["schemas"]["HTTPStatus"];
            /**
             * Title
             * @default Data Upload Error.
             */
            title: string;
            /**
             * Type
             * @default https://seequent.com/error-codes/geoscienceobject/data/not-found
             */
            type: string;
        };
        /** EvoRequestValidationError */
        EvoRequestValidationError: {
            /** Detail */
            detail?: string | null;
            /** @default 422 */
            status: components["schemas"]["HTTPStatus"];
            /**
             * Title
             * @default Validation Error.
             */
            title: string;
            /**
             * Type
             * @default https://seequent.com/error-codes/geoscienceobject/validation
             */
            type: string;
        };
        /**
         * GeoJSONType
         * @enum {string}
         */
        GeoJSONType: "Polygon";
        /**
         * GeoscienceObject
         * @description The geoscience object with the additional required schema properties.
         *
         *     This object is largely defined by the schemas in the geoscience-object-schemas repository.
         *     There are some default, required values listed here explicitly.
         */
        GeoscienceObject: {
            /**
             * Name
             * @description The name of the geoscience object.
             */
            name: string;
            /**
             * Schema
             * @description The geoscience object schema.
             */
            schema: string;
            /**
             * Uuid
             * Format: uuid
             * @description Unique object UUID.
             */
            uuid?: string | null;
        } & {
            [key: string]: unknown;
        };
        /**
         * GeoscienceObjectVersion
         * @description Geoscience object version.
         */
        GeoscienceObjectVersion: {
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            created_by?: components["schemas"]["User"] | null;
            /** Etag */
            etag: string;
            links: components["schemas"]["ObjectVersionResponseLinks"];
            stage?: components["schemas"]["StageResponse"] | null;
            /** Version Id */
            version_id: string;
        };
        /** GetObjectResponse */
        GetObjectResponse: {
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            created_by?: components["schemas"]["User"] | null;
            /** Deleted At */
            deleted_at?: string | null;
            deleted_by?: components["schemas"]["User"] | null;
            /** Etag */
            etag: string;
            geojson_bounding_box?: components["schemas"]["BoundingBox"] | null;
            links: components["schemas"]["ObjectResponseLinks"];
            /**
             * Modified At
             * Format: date-time
             */
            modified_at: string;
            modified_by?: components["schemas"]["User"] | null;
            object: components["schemas"]["GeoscienceObject"];
            /**
             * Object Id
             * Format: uuid
             */
            object_id: string;
            /** Object Path */
            object_path?: string | null;
            stage?: components["schemas"]["StageResponse"] | null;
            /** Version Id */
            version_id: string;
            /** Versions */
            versions?: components["schemas"]["GeoscienceObjectVersion"][] | null;
        };
        /**
         * HTTPStatus
         * @description HTTP status codes and reason phrases
         *
         *     Status codes from the following RFCs are all observed:
         *
         *         * RFC 9110: HTTP Semantics, obsoletes 7231, which obsoleted 2616
         *         * RFC 6585: Additional HTTP Status Codes
         *         * RFC 3229: Delta encoding in HTTP
         *         * RFC 4918: HTTP Extensions for WebDAV, obsoletes 2518
         *         * RFC 5842: Binding Extensions to WebDAV
         *         * RFC 7238: Permanent Redirect
         *         * RFC 2295: Transparent Content Negotiation in HTTP
         *         * RFC 2774: An HTTP Extension Framework
         *         * RFC 7725: An HTTP Status Code to Report Legal Obstacles
         *         * RFC 7540: Hypertext Transfer Protocol Version 2 (HTTP/2)
         *         * RFC 2324: Hyper Text Coffee Pot Control Protocol (HTCPCP/1.0)
         *         * RFC 8297: An HTTP Status Code for Indicating Hints
         *         * RFC 8470: Using Early Data in HTTP
         * @enum {integer}
         */
        HTTPStatus: 100 | 101 | 102 | 103 | 200 | 201 | 202 | 203 | 204 | 205 | 206 | 207 | 208 | 226 | 300 | 301 | 302 | 303 | 304 | 305 | 307 | 308 | 400 | 401 | 402 | 403 | 404 | 405 | 406 | 407 | 408 | 409 | 410 | 411 | 412 | 413 | 413 | 414 | 414 | 415 | 416 | 416 | 417 | 418 | 421 | 422 | 422 | 423 | 424 | 425 | 426 | 428 | 429 | 431 | 451 | 500 | 501 | 502 | 503 | 504 | 505 | 506 | 507 | 508 | 510 | 511;
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /** InsufficientRoleError */
        InsufficientRoleError: {
            /** Detail */
            detail?: string | null;
            /**
             * Permitted Roles
             * @default []
             */
            permitted_roles: unknown[];
            /** @default 403 */
            status: components["schemas"]["HTTPStatus"];
            /**
             * Title
             * @default Insufficient Role.
             */
            title: string;
            /**
             * Type
             * @default https://seequent.com/error-codes/geoscienceobject/auth/insufficient-role
             */
            type: string;
            /**
             * Your Role
             * @default
             */
            your_role: string;
        };
        /** InvalidFilterParams */
        InvalidFilterParams: {
            /** Detail */
            detail?: string | null;
            /** @default 422 */
            status: components["schemas"]["HTTPStatus"];
            /**
             * Title
             * @default Invalid Filter Params.
             */
            title: string;
            /**
             * Type
             * @default https://seequent.com/error-codes/geoscienceobject/filtering/invalid-params
             */
            type: string;
        };
        /** InvalidGeoscienceObject */
        InvalidGeoscienceObject: {
            /** Detail */
            detail?: string | null;
            /**
             * Json Path
             * @default
             */
            json_path: string;
            /**
             * Schema Path
             * @default []
             */
            schema_path: unknown[];
            /** @default 400 */
            status: components["schemas"]["HTTPStatus"];
            /**
             * Title
             * @default The Geoscience Object Is Invalid.
             */
            title: string;
            /**
             * Type
             * @default https://seequent.com/error-codes/geoscienceobject/schemas/invalid-object
             */
            type: string;
        };
        /** InvalidObjectError */
        InvalidObjectError: {
            /** Detail */
            detail?: string | null;
            /** @default 400 */
            status: components["schemas"]["HTTPStatus"];
            /**
             * Title
             * @default Object Error.
             */
            title: string;
            /**
             * Type
             * @default https://seequent.com/error-codes/geoscienceobject/objects/invalid-object
             */
            type: string;
        };
        /** InvalidPathError */
        InvalidPathError: {
            /** Detail */
            detail?: string | null;
            /** @default 400 */
            status: components["schemas"]["HTTPStatus"];
            /**
             * Title
             * @default Invalid Path.
             */
            title: string;
            /**
             * Type
             * @default https://seequent.com/error-codes/geoscienceobject/invalid-path
             */
            type: string;
        };
        /** InvalidSortParams */
        InvalidSortParams: {
            /** Detail */
            detail?: string | null;
            /** @default 422 */
            status: components["schemas"]["HTTPStatus"];
            /**
             * Title
             * @default Invalid Sorting Parameters
             */
            title: string;
            /**
             * Type
             * @default https://seequent.com/error-codes/geoscienceobject/sorting/invalid-params
             */
            type: string;
        };
        /** InvalidTokenError */
        InvalidTokenError: {
            /** Detail */
            detail?: string | null;
            /** @default 401 */
            status: components["schemas"]["HTTPStatus"];
            /**
             * Title
             * @default Access Denied.
             */
            title: string;
            /**
             * Type
             * @default https://seequent.com/error-codes/geoscienceobject/auth/invalid-token
             */
            type: string;
        };
        /** LatestObjectVersionIdResponse */
        LatestObjectVersionIdResponse: {
            /** Object Id */
            object_id: string;
            /** Version Id */
            version_id?: string | null;
        };
        /** ListObjectsResponse */
        ListObjectsResponse: {
            /**
             * Count
             * @default 0
             */
            count: number;
            /**
             * Limit
             * @default 0
             */
            limit: number;
            links: components["schemas"]["ListObjectsResponseLinks"];
            /** Objects */
            objects: components["schemas"]["ListedObject"][];
            /**
             * Offset
             * @default 0
             */
            offset: number;
            /**
             * Total
             * @default 0
             */
            total: number;
        };
        /** ListObjectsResponseLinks */
        ListObjectsResponseLinks: {
            /** Next */
            next?: string | null;
            /** Prev */
            prev?: string | null;
        };
        /** ListOrgObjectsResponse */
        ListOrgObjectsResponse: {
            /**
             * Count
             * @default 0
             */
            count: number;
            /**
             * Limit
             * @default 0
             */
            limit: number;
            links: components["schemas"]["ListObjectsResponseLinks"];
            /** Objects */
            objects: components["schemas"]["OrgListedObject"][];
            /**
             * Offset
             * @default 0
             */
            offset: number;
            /**
             * Total
             * @default 0
             */
            total: number;
        };
        /** ListStagesResponse */
        ListStagesResponse: {
            /** Stages */
            stages: components["schemas"]["StageListItem"][];
        };
        /** ListedObject */
        ListedObject: {
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            created_by?: components["schemas"]["User"] | null;
            /** Deleted At */
            deleted_at?: string | null;
            deleted_by?: components["schemas"]["User"] | null;
            /** Etag */
            etag: string;
            geojson_bounding_box?: components["schemas"]["BoundingBox"] | null;
            links: components["schemas"]["ListedObjectLinks"];
            /**
             * Modified At
             * Format: date-time
             */
            modified_at: string;
            modified_by?: components["schemas"]["User"] | null;
            /** Name */
            name: string;
            /**
             * Object Id
             * Format: uuid
             */
            object_id: string;
            /** Path */
            path: string;
            /**
             * Schema
             * @description The geoscience object schema.
             */
            schema: string;
            stage?: components["schemas"]["StageResponse"] | null;
            /** Version Id */
            version_id: string;
        };
        /** ListedObjectLinks */
        ListedObjectLinks: {
            /** Download */
            download: string;
        };
        /** MetadataUpdateBody */
        MetadataUpdateBody: {
            /** Stage Id */
            stage_id?: string | null;
        };
        /** MissingTokenError */
        MissingTokenError: {
            /** Detail */
            detail?: string | null;
            /** @default 401 */
            status: components["schemas"]["HTTPStatus"];
            /**
             * Title
             * @default Access Denied.
             */
            title: string;
            /**
             * Type
             * @default https://seequent.com/error-codes/geoscienceobject/auth/missing-token
             */
            type: string;
        };
        /** ObjectAlreadyExistsError */
        ObjectAlreadyExistsError: {
            /** Detail */
            detail?: string | null;
            /** Existing Id */
            existing_id?: string | null;
            /**
             * Object Path
             * @default
             */
            object_path: string;
            /** @default 409 */
            status: components["schemas"]["HTTPStatus"];
            /**
             * Title
             * @default Geoscience Object Already Exists.
             */
            title: string;
            /**
             * Type
             * @default https://seequent.com/error-codes/geoscienceobject/objects/already-exists
             */
            type: string;
        };
        /** ObjectDataRefInvalid */
        ObjectDataRefInvalid: {
            /** Detail */
            detail?: string | null;
            /** @default 400 */
            status: components["schemas"]["HTTPStatus"];
            /**
             * Title
             * @default Data Key Not Valid.
             */
            title: string;
            /**
             * Type
             * @default https://seequent.com/error-codes/geoscienceobject/data/invalid-key
             */
            type: string;
        };
        /** ObjectDataRefNotFound */
        ObjectDataRefNotFound: {
            /** Detail */
            detail?: string | null;
            /** @default 400 */
            status: components["schemas"]["HTTPStatus"];
            /**
             * Title
             * @default Data Key Not Found.
             */
            title: string;
            /**
             * Type
             * @default https://seequent.com/error-codes/geoscienceobject/objects/data-key-not-found
             */
            type: string;
        };
        /** ObjectDataRefNotMovedError */
        ObjectDataRefNotMovedError: {
            /** Detail */
            detail?: string | null;
            /** @default 400 */
            status: components["schemas"]["HTTPStatus"];
            /**
             * Title
             * @default Data Key Not Moved.
             */
            title: string;
            /**
             * Type
             * @default https://seequent.com/error-codes/geoscienceobject/objects/data-key-not-found
             */
            type: string;
        };
        /** ObjectModified */
        ObjectModified: {
            /** Detail */
            detail?: string | null;
            /** @default 412 */
            status: components["schemas"]["HTTPStatus"];
            /**
             * Title
             * @default Object Modified.
             */
            title: string;
            /**
             * Type
             * @default https://seequent.com/error-codes/geoscienceobject/objects/modified
             */
            type: string;
        };
        /** ObjectNotFound */
        ObjectNotFound: {
            /** Detail */
            detail?: string | null;
            /** @default 404 */
            status: components["schemas"]["HTTPStatus"];
            /**
             * Title
             * @default Object Not Found.
             */
            title: string;
            /**
             * Type
             * @default https://seequent.com/error-codes/geoscienceobject/objects/not-found
             */
            type: string;
        };
        /** ObjectResponseLinks */
        ObjectResponseLinks: {
            /** Data */
            data: components["schemas"]["DataDownloadUrl"][];
            /** Download */
            download: string;
        };
        /** ObjectStoreError */
        ObjectStoreError: {
            /** Detail */
            detail?: string | null;
            /** @default 502 */
            status: components["schemas"]["HTTPStatus"];
            /**
             * Title
             * @default Geoscience Object Storage Operation Failed.
             */
            title: string;
            /**
             * Type
             * @default https://seequent.com/error-codes/geoscienceobject/objects/storage
             */
            type: string;
        };
        /** ObjectVersionResponseLinks */
        ObjectVersionResponseLinks: {
            /** Download */
            download: string;
        };
        /** OrgListedObject */
        OrgListedObject: {
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            created_by?: components["schemas"]["User"] | null;
            /** Deleted At */
            deleted_at?: string | null;
            deleted_by?: components["schemas"]["User"] | null;
            geojson_bounding_box?: components["schemas"]["BoundingBox"] | null;
            /**
             * Modified At
             * Format: date-time
             */
            modified_at: string;
            modified_by?: components["schemas"]["User"] | null;
            /** Name */
            name: string;
            /**
             * Object Id
             * Format: uuid
             */
            object_id: string;
            /** Schema */
            schema: string;
            stage?: components["schemas"]["StageResponse"] | null;
            workspace_access?: components["schemas"]["RoleEnum"] | null;
            /**
             * Workspace Id
             * Format: uuid
             */
            workspace_id: string;
            /** Workspace Name */
            workspace_name?: string | null;
        };
        /** PostObjectResponse */
        PostObjectResponse: {
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            created_by?: components["schemas"]["User"] | null;
            /** Deleted At */
            deleted_at?: string | null;
            deleted_by?: components["schemas"]["User"] | null;
            /** Etag */
            etag: string;
            geojson_bounding_box?: components["schemas"]["BoundingBox"] | null;
            links: components["schemas"]["ObjectResponseLinks"];
            /**
             * Modified At
             * Format: date-time
             */
            modified_at: string;
            modified_by?: components["schemas"]["User"] | null;
            object: components["schemas"]["GeoscienceObject"];
            /** Object Id */
            object_id?: string | null;
            /** Object Path */
            object_path?: string | null;
            stage?: components["schemas"]["StageResponse"] | null;
            /** Version Id */
            version_id: string;
        };
        /**
         * RoleEnum
         * @enum {string}
         */
        RoleEnum: "owner" | "editor" | "viewer";
        /** SchemaRequestFailed */
        SchemaRequestFailed: {
            /** Detail */
            detail?: string | null;
            /** @default 404 */
            status: components["schemas"]["HTTPStatus"];
            /**
             * Title
             * @default Failed To Request Geoscience Object Schema.
             */
            title: string;
            /**
             * Type
             * @default https://seequent.com/error-codes/geoscienceobject/schemas/not-found
             */
            type: string;
        };
        /** StageListItem */
        StageListItem: {
            /** Name */
            name: string;
            /**
             * Stage Id
             * Format: uuid
             */
            stage_id: string;
        };
        /** StageResponse */
        StageResponse: {
            /** Name */
            name: string;
            /**
             * Stage Id
             * Format: uuid
             */
            stage_id: string;
        };
        /**
         * UpdateGeoscienceObject
         * @description The geoscience object with the additional required schema properties.
         *
         *     The uuid field must be set when updating a geoscience object.
         *     This object is largely defined by the schemas in the geoscience-object-schemas repository.
         *     There are some default, required values listed here explicitly.
         */
        UpdateGeoscienceObject: {
            /**
             * Name
             * @description The name of the geoscience object.
             */
            name: string;
            /**
             * Schema
             * @description The geoscience object schema.
             */
            schema: string;
            /**
             * Uuid
             * Format: uuid
             * @description Unique object UUID.
             */
            uuid: string;
        } & {
            [key: string]: unknown;
        };
        /**
         * User
         * @description User details.
         */
        User: {
            /** Email */
            email?: string | null;
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Name */
            name?: string | null;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    listObjectsByOrg: {
        parameters: {
            query?: {
                /** @description Number of results to skip before returning `limit` number of results. */
                offset?: number;
                /** @description Max number of results per page. */
                limit?: number;
                /** @description When true, only objects that have been deleted will be returned */
                deleted?: boolean;
                /** @description Only return objects in workspaces the user is permitted to access. */
                permitted_workspaces_only?: boolean;
                /** @description A comma separated list of fields to order by, where the default sort order is ascending. To specify the sort order, prefix the field name with either `asc:` or `desc:` for ascending or descending respectively. Field names can either be arbitrary, representing a field nested inside the data, or one of the following known sort fields: `created_at`, `created_by`, `modified_at`, `modified_by`, `object_name`, `deleted_at` */
                order_by?: string;
                /** @description The UUID of the user that created an object */
                created_by?: (string)[];
                /** @description
                 *     A date or dates (max 2) to filter objects by. Dates may contain operator prefixes,
                 *     in the form `<operator>:<datetime>`. The following operators are available
                 *     (`lt`=less than, `lte`=less than or equal to, `gt`=greater than, `gte`=greater than or equal to).
                 *     If you omit the operator, then it is assumed the operator is 'equal to'.
                 *     In this case you may only supply one date. The dates must also be in a valid ISO 8601 format.
                 *     Dates may include a UTC offset. If the offset is omitted, the timezone is assumed to be UTC.
                 *      */
                created_at?: string[];
                /** @description The UUID of the user that modified an object */
                modified_by?: (string)[];
                /** @description
                 *     A date or dates (max 2) to filter objects by. Dates may contain operator prefixes,
                 *     in the form `<operator>:<datetime>`. The following operators are available
                 *     (`lt`=less than, `lte`=less than or equal to, `gt`=greater than, `gte`=greater than or equal to).
                 *     If you omit the operator, then it is assumed the operator is 'equal to'.
                 *     In this case you may only supply one date. The dates must also be in a valid ISO 8601 format.
                 *     Dates may include a UTC offset. If the offset is omitted, the timezone is assumed to be UTC.
                 *      */
                modified_at?: string[];
                /** @description The name of the object to filter on. For backwards compatibility, when no operators are supplied, this will perform a case sensitive prefix match of the object file name. The query `object_name=gold` will match an object with the name `goldcolumns.json`. Providing an operator will query over the entire path to and including the file name. */
                object_name?: string[];
                /** @description The type of schema you want to filter by. */
                schema_id?: string[];
                /** @description The coordinates of the data to spatially search on. The value may optionally include one of two spatial operators, `geowithin` or `geointersects`. If an operator is not defined, then `geointersects` will be used by default. The coordinates must be 5 pairs of longitude and latitude, representing a closed polygon. The first and last coordinates must be the same to close the polygon. */
                geojson_bounding_box?: string[];
                /** @description The UUID of the user that deleted an object */
                deleted_by?: (string)[];
                /** @description
                 *     A date or dates (max 2) to filter objects by. Dates may contain operator prefixes,
                 *     in the form `<operator>:<datetime>`. The following operators are available
                 *     (`lt`=less than, `lte`=less than or equal to, `gt`=greater than, `gte`=greater than or equal to).
                 *     If you omit the operator, then it is assumed the operator is 'equal to'.
                 *     In this case you may only supply one date. The dates must also be in a valid ISO 8601 format.
                 *     Dates may include a UTC offset. If the offset is omitted, the timezone is assumed to be UTC.
                 *      */
                deleted_at?: string[];
            };
            header?: never;
            path: {
                /** @description The customer's organisation ID */
                org_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListOrgObjectsResponse"];
                };
            };
            /** @description
             *     #### /geoscienceobject/bad-request
             *
             *     Bad request. The server cannot or will not process the request due to a client error.
             *
             *      */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestError"];
                };
            };
            /** @description
             *     #### /geoscienceobject/auth/missing-token
             *
             *     Unauthorized. The client request has not been completed as the provided credentials  are invalid.
             *
             *
             *     #### /geoscienceobject/auth/invalid-token
             *
             *     Forbidden. The client credentials are valid but do not permit access to this resource.
             *
             *      */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MissingTokenError"] | components["schemas"]["InvalidTokenError"];
                };
            };
            /** @description
             *     #### /geoscienceobject/filtering/invalid-params
             *
             *     The provided filter parameters are invalid.
             *
             *
             *     #### /geoscienceobject/sorting/invalid-params
             *
             *     The provided sort parameters are invalid.
             *
             *
             *     #### /geoscienceobject/validation
             *
             *     The request was invalid and will not be processed due to a client error.
             *
             *      */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InvalidFilterParams"] | components["schemas"]["InvalidSortParams"] | components["schemas"]["EvoRequestValidationError"];
                };
            };
            /** @description
             *     #### /geoscienceobject/api-errors
             *
             *     A server error has occurred.
             *
             *      */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description
             *     #### /geoscienceobject/objects/storage
             *
             *     Attempting an operation within the object store caused an upstream error.
             *
             *
             *     #### /geoscienceobject/bad-gateway
             *
             *     Bad gateway. A response required to handle the request is invalid.
             *
             *      */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ObjectStoreError"] | components["schemas"]["BadGateway"];
                };
            };
        };
    };
    listStages: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The customer's organisation ID */
                org_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListStagesResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    putDataInWorkspace: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The customer's organisation ID */
                org_id: string;
                workspace_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DataUploadRequestBody"][];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DataUploadResponseBody"][];
                };
            };
            /** @description
             *     #### /geoscienceobject/bad-request
             *
             *     Bad request. The server cannot or will not process the request due to a client error.
             *
             *      */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestError"];
                };
            };
            /** @description
             *     #### /geoscienceobject/auth/missing-token
             *
             *     Unauthorized. The client request has not been completed as the provided credentials  are invalid.
             *
             *
             *     #### /geoscienceobject/auth/invalid-token
             *
             *     Forbidden. The client credentials are valid but do not permit access to this resource.
             *
             *      */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MissingTokenError"] | components["schemas"]["InvalidTokenError"];
                };
            };
            /** @description
             *     #### /geoscienceobject/auth/insufficient-role
             *
             *     The user lacks the required role to access this endpoint.
             *
             *      */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InsufficientRoleError"];
                };
            };
            /** @description
             *     #### /geoscienceobject/data/not-found
             *
             *     The requested data cannot be found. This may be caused by an incorrect workspace ID
             *
             *      */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DataWorkspaceNotFoundError"];
                };
            };
            /** @description
             *     #### /geoscienceobject/data/gone
             *
             *     The requested data has been deleted. This may be caused by a soft-deleted workspace
             *
             *      */
            410: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DataWorkspaceGoneError"];
                };
            };
            /** @description
             *     #### /geoscienceobject/validation
             *
             *     The request was invalid and will not be processed due to a client error.
             *
             *      */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EvoRequestValidationError"];
                };
            };
            /** @description
             *     #### /geoscienceobject/api-errors
             *
             *     A server error has occurred.
             *
             *      */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description
             *     #### /geoscienceobject/data/data-upstream
             *
             *     An upstream error occurred
             *
             *
             *     #### /geoscienceobject/bad-gateway
             *
             *     Bad gateway. A response required to handle the request is invalid.
             *
             *      */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DataUpstreamError"] | components["schemas"]["BadGateway"];
                };
            };
        };
    };
    getObjectById: {
        parameters: {
            query?: {
                /** @description The (timestamp) version of the object to retrieve. Defaults to the latest version if not specified. */
                version?: string;
                /** @description Whether to return all versions of the object */
                include_versions?: boolean;
                /** @description When true, only objects that have been deleted will be returned */
                deleted?: boolean;
            };
            header?: {
                /** @description Optional header used to check if there are any more recent versions of an object than the one specified. Returns 304 (Not Modified) if there are no newer versions. */
                "If-None-Match"?: string | null;
            };
            path: {
                /** @description UUID of a geoscience object. */
                object_id: string;
                /** @description The customer's organisation ID */
                org_id: string;
                workspace_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The requested geoscience object and metadata */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetObjectResponse"];
                };
            };
            /** @description Not Modified. The requested object version ID matches the latest version of the object. */
            304: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description
             *     #### /geoscienceobject/bad-request
             *
             *     Bad request. The server cannot or will not process the request due to a client error.
             *
             *      */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestError"];
                };
            };
            /** @description
             *     #### /geoscienceobject/auth/missing-token
             *
             *     Unauthorized. The client request has not been completed as the provided credentials  are invalid.
             *
             *
             *     #### /geoscienceobject/auth/invalid-token
             *
             *     Forbidden. The client credentials are valid but do not permit access to this resource.
             *
             *      */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MissingTokenError"] | components["schemas"]["InvalidTokenError"];
                };
            };
            /** @description
             *     #### /geoscienceobject/objects/not-found
             *
             *     No object exists in the workspace by the requested UUID.
             *
             *      */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ObjectNotFound"];
                };
            };
            /** @description
             *     #### /geoscienceobject/validation
             *
             *     The request was invalid and will not be processed due to a client error.
             *
             *      */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EvoRequestValidationError"];
                };
            };
            /** @description
             *     #### /geoscienceobject/api-errors
             *
             *     A server error has occurred.
             *
             *      */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description
             *     #### /geoscienceobject/bad-gateway
             *
             *     Bad gateway. A response required to handle the request is invalid.
             *
             *      */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadGateway"];
                };
            };
        };
    };
    updateObjectsById: {
        parameters: {
            query?: {
                /** @description When set to false, the operation will attempt to restore the object. */
                deleted?: boolean;
            };
            header?: {
                /** @description Optional header to apply an update _only if_ the specified object version is the most recent available on the server. */
                "If-Match"?: string | null;
            };
            path: {
                /** @description UUID of a geoscience object. */
                object_id: string;
                /** @description The customer's organisation ID */
                org_id: string;
                workspace_id: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["UpdateGeoscienceObject"] | null;
            };
        };
        responses: {
            /** @description The geoscience object version has been created. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PostObjectResponse"];
                };
            };
            /** @description The geoscience object has been restored. Location of the resource has not changed. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The geoscience object has been restored. Location of the resource has changed (e.g., rename on restore). */
            303: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PostObjectResponse"];
                };
            };
            /** @description
             *     #### /geoscienceobject/schemas/invalid-object
             *
             *     Invalid geoscience object. The contents of the object failed to validate with the schema referenced in its `schema` property. Check the request contents and try again.
             *
             *
             *     #### /geoscienceobject/data/invalid-key
             *
             *     The object contains data references that are invalid. These must be SHA256 digests or UUIDs.
             *
             *
             *     #### /geoscienceobject/objects/data-key-not-found
             *
             *     The object contains references to data blobs that do not exist. Upload them and try again.
             *
             *
             *     #### /geoscienceobject/objects/data-key-not-found
             *
             *     Data blobs referenced in the object were not moved to their intended destination in storage.
             *
             *
             *     #### /geoscienceobject/objects/invalid-object
             *
             *     The uploaded object must be of the same schema type as the existing object. Additionally, the object filename must have a `.json` extension.
             *
             *
             *     #### /geoscienceobject/bad-request
             *
             *     Bad request. The server cannot or will not process the request due to a client error.
             *
             *      */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InvalidGeoscienceObject"] | components["schemas"]["ObjectDataRefInvalid"] | components["schemas"]["ObjectDataRefNotFound"] | components["schemas"]["ObjectDataRefNotMovedError"] | components["schemas"]["InvalidObjectError"] | components["schemas"]["BadRequestError"];
                };
            };
            /** @description
             *     #### /geoscienceobject/auth/missing-token
             *
             *     Unauthorized. The client request has not been completed as the provided credentials  are invalid.
             *
             *
             *     #### /geoscienceobject/auth/invalid-token
             *
             *     Forbidden. The client credentials are valid but do not permit access to this resource.
             *
             *      */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MissingTokenError"] | components["schemas"]["InvalidTokenError"];
                };
            };
            /** @description
             *     #### /geoscienceobject/auth/insufficient-role
             *
             *     The user lacks the required role to access this endpoint.
             *
             *      */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InsufficientRoleError"];
                };
            };
            /** @description
             *     #### /geoscienceobject/objects/not-found
             *
             *     An object by the requested UUID does not exist.
             *
             *
             *     #### /geoscienceobject/schemas/not-found
             *
             *     Attempting to request an object schema caused an upstream error.
             *
             *      */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ObjectNotFound"] | components["schemas"]["SchemaRequestFailed"];
                };
            };
            /** @description
             *     #### /geoscienceobject/objects/already-exists
             *
             *     An object already exists by this path/UUID.
             *
             *      */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ObjectAlreadyExistsError"];
                };
            };
            /** @description
             *     #### /geoscienceobject/objects/modified
             *
             *     The object has been modified, making these changes stale.
             *
             *      */
            412: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ObjectModified"];
                };
            };
            /** @description
             *     #### /geoscienceobject/validation
             *
             *     The request was invalid and will not be processed due to a client error.
             *
             *      */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EvoRequestValidationError"];
                };
            };
            /** @description
             *     #### /geoscienceobject/api-errors
             *
             *     A server error has occurred.
             *
             *      */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description
             *     #### /geoscienceobject/bad-gateway
             *
             *     Bad gateway. A response required to handle the request is invalid.
             *
             *      */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadGateway"];
                };
            };
        };
    };
    deleteObjectsById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                object_id: string;
                /** @description The customer's organisation ID */
                org_id: string;
                workspace_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The geoscience object version has been deleted. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description
             *     #### /geoscienceobject/bad-request
             *
             *     Bad request. The server cannot or will not process the request due to a client error.
             *
             *      */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestError"];
                };
            };
            /** @description
             *     #### /geoscienceobject/auth/missing-token
             *
             *     Unauthorized. The client request has not been completed as the provided credentials  are invalid.
             *
             *
             *     #### /geoscienceobject/auth/invalid-token
             *
             *     Forbidden. The client credentials are valid but do not permit access to this resource.
             *
             *      */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MissingTokenError"] | components["schemas"]["InvalidTokenError"];
                };
            };
            /** @description
             *     #### /geoscienceobject/auth/insufficient-role
             *
             *     The user lacks the required role to access this endpoint.
             *
             *      */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InsufficientRoleError"];
                };
            };
            /** @description
             *     #### /geoscienceobject/objects/not-found
             *
             *     An object by the requested UUID does not exist.
             *
             *      */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ObjectNotFound"];
                };
            };
            /** @description
             *     #### /geoscienceobject/validation
             *
             *     The request was invalid and will not be processed due to a client error.
             *
             *      */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EvoRequestValidationError"];
                };
            };
            /** @description
             *     #### /geoscienceobject/api-errors
             *
             *     A server error has occurred.
             *
             *      */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description
             *     #### /geoscienceobject/bad-gateway
             *
             *     Bad gateway. A response required to handle the request is invalid.
             *
             *      */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadGateway"];
                };
            };
        };
    };
    getObject: {
        parameters: {
            query?: {
                /** @description The (timestamp) version of the object to retrieve. Defaults to the latest version if not specified. */
                version?: string;
                /** @description Whether to return all versions of the object */
                include_versions?: boolean;
            };
            header?: {
                /** @description Optional header used to check if there are any more recent versions of an object than the one specified. Returns 304 (Not Modified) if there are no newer versions. */
                "If-None-Match"?: string | null;
            };
            path: {
                /** @description The customer's organisation ID */
                org_id: string;
                workspace_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The requested geoscience object and metadata */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetObjectResponse"];
                };
            };
            /** @description Not Modified. The requested object version ID matches the latest version of the object. */
            304: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description
             *     #### /geoscienceobject/invalid-path
             *
             *     The object path contains invalid symbols.
             *
             *
             *     #### /geoscienceobject/bad-request
             *
             *     Bad request. The server cannot or will not process the request due to a client error.
             *
             *      */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InvalidPathError"] | components["schemas"]["BadRequestError"];
                };
            };
            /** @description
             *     #### /geoscienceobject/auth/missing-token
             *
             *     Unauthorized. The client request has not been completed as the provided credentials  are invalid.
             *
             *
             *     #### /geoscienceobject/auth/invalid-token
             *
             *     Forbidden. The client credentials are valid but do not permit access to this resource.
             *
             *      */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MissingTokenError"] | components["schemas"]["InvalidTokenError"];
                };
            };
            /** @description
             *     #### /geoscienceobject/objects/not-found
             *
             *     No object exists in the workspace by the requested UUID.
             *
             *      */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ObjectNotFound"];
                };
            };
            /** @description
             *     #### /geoscienceobject/validation
             *
             *     The request was invalid and will not be processed due to a client error.
             *
             *      */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EvoRequestValidationError"];
                };
            };
            /** @description
             *     #### /geoscienceobject/api-errors
             *
             *     A server error has occurred.
             *
             *      */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description
             *     #### /geoscienceobject/bad-gateway
             *
             *     Bad gateway. A response required to handle the request is invalid.
             *
             *      */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadGateway"];
                };
            };
        };
    };
    postObjects: {
        parameters: {
            query?: never;
            header?: {
                /** @description Optional header to apply an update _only if_ the specified object version is the most recent available on the server. */
                "If-Match"?: string | null;
            };
            path: {
                /** @description The customer's organisation ID */
                org_id: string;
                workspace_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GeoscienceObject"];
            };
        };
        responses: {
            /** @description The geoscience object version has been created. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PostObjectResponse"];
                };
            };
            /** @description
             *     #### /geoscienceobject/schemas/invalid-object
             *
             *     Invalid geoscience object. The contents of the object failed to validate with the schema referenced in its `schema` property. Check the request contents and try again.
             *
             *
             *     #### /geoscienceobject/data/invalid-key
             *
             *     The object contains data references that are invalid. These must be SHA256 digests or UUIDs.
             *
             *
             *     #### /geoscienceobject/objects/data-key-not-found
             *
             *     The object contains references to data blobs that do not exist. Upload them and try again.
             *
             *
             *     #### /geoscienceobject/objects/data-key-not-found
             *
             *     Data blobs referenced in the object were not moved to their intended destination in storage.
             *
             *
             *     #### /geoscienceobject/objects/invalid-object
             *
             *     The uploaded object must be of the same schema type as the existing object. Additionally, the object filename must have a `.json` extension.
             *
             *
             *     #### /geoscienceobject/invalid-path
             *
             *     The object path contains invalid symbols.
             *
             *
             *     #### /geoscienceobject/bad-request
             *
             *     Bad request. The server cannot or will not process the request due to a client error.
             *
             *      */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InvalidGeoscienceObject"] | components["schemas"]["ObjectDataRefInvalid"] | components["schemas"]["ObjectDataRefNotFound"] | components["schemas"]["ObjectDataRefNotMovedError"] | components["schemas"]["InvalidObjectError"] | components["schemas"]["InvalidPathError"] | components["schemas"]["BadRequestError"];
                };
            };
            /** @description
             *     #### /geoscienceobject/auth/missing-token
             *
             *     Unauthorized. The client request has not been completed as the provided credentials  are invalid.
             *
             *
             *     #### /geoscienceobject/auth/invalid-token
             *
             *     Forbidden. The client credentials are valid but do not permit access to this resource.
             *
             *      */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MissingTokenError"] | components["schemas"]["InvalidTokenError"];
                };
            };
            /** @description
             *     #### /geoscienceobject/auth/insufficient-role
             *
             *     The user lacks the required role to access this endpoint.
             *
             *      */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InsufficientRoleError"];
                };
            };
            /** @description
             *     #### /geoscienceobject/objects/not-found
             *
             *     An object by the requested UUID does not exist.
             *
             *
             *     #### /geoscienceobject/schemas/not-found
             *
             *     Attempting to request an object schema caused an upstream error.
             *
             *      */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ObjectNotFound"] | components["schemas"]["SchemaRequestFailed"];
                };
            };
            /** @description
             *     #### /geoscienceobject/objects/already-exists
             *
             *     An object already exists by this path/UUID.
             *
             *      */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ObjectAlreadyExistsError"];
                };
            };
            /** @description
             *     #### /geoscienceobject/objects/modified
             *
             *     The object has been modified, making these changes stale.
             *
             *      */
            412: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ObjectModified"];
                };
            };
            /** @description
             *     #### /geoscienceobject/validation
             *
             *     The request was invalid and will not be processed due to a client error.
             *
             *      */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EvoRequestValidationError"];
                };
            };
            /** @description
             *     #### /geoscienceobject/api-errors
             *
             *     A server error has occurred.
             *
             *      */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description
             *     #### /geoscienceobject/bad-gateway
             *
             *     Bad gateway. A response required to handle the request is invalid.
             *
             *      */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadGateway"];
                };
            };
        };
    };
    deleteObjectByPath: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The customer's organisation ID */
                org_id: string;
                workspace_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The geoscience object has been soft deleted. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description
             *     #### /geoscienceobject/bad-request
             *
             *     Bad request. The server cannot or will not process the request due to a client error.
             *
             *      */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestError"];
                };
            };
            /** @description
             *     #### /geoscienceobject/auth/missing-token
             *
             *     Unauthorized. The client request has not been completed as the provided credentials  are invalid.
             *
             *
             *     #### /geoscienceobject/auth/invalid-token
             *
             *     Forbidden. The client credentials are valid but do not permit access to this resource.
             *
             *      */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MissingTokenError"] | components["schemas"]["InvalidTokenError"];
                };
            };
            /** @description
             *     #### /geoscienceobject/auth/insufficient-role
             *
             *     The user lacks the required role to access this endpoint.
             *
             *      */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InsufficientRoleError"];
                };
            };
            /** @description
             *     #### /geoscienceobject/objects/not-found
             *
             *     An object by the requested path does not exist.
             *
             *      */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ObjectNotFound"];
                };
            };
            /** @description
             *     #### /geoscienceobject/validation
             *
             *     The request was invalid and will not be processed due to a client error.
             *
             *      */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EvoRequestValidationError"];
                };
            };
            /** @description
             *     #### /geoscienceobject/api-errors
             *
             *     A server error has occurred.
             *
             *      */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description
             *     #### /geoscienceobject/bad-gateway
             *
             *     Bad gateway. A response required to handle the request is invalid.
             *
             *      */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadGateway"];
                };
            };
        };
    };
    listObjects: {
        parameters: {
            query?: {
                /** @description Max number of results per page. */
                limit?: number;
                /** @description Number of results to skip before returning `limit` number of results. */
                offset?: number;
                /** @description When true, only objects that have been deleted will be returned */
                deleted?: boolean;
                /** @description A comma separated list of fields to order by, where the default sort order is ascending. To specify the sort order, prefix the field name with either `asc:` or `desc:` for ascending or descending respectively. Field names can either be arbitrary, representing a field nested inside the data, or one of the following known sort fields: `author`, `created_at`, `created_by`, `deleted_at`, `modified_at`, `modified_by`, `object_name` */
                order_by?: string;
                /**
                 * @deprecated
                 * @description (deprecated, use `created_by`) The profile ID that you want to filter by
                 */
                author?: (string)[];
                /** @description The UUID of the user that created an object */
                created_by?: (string)[];
                /** @description
                 *     A date or dates (max 2) to filter objects by. Dates may contain operator prefixes,
                 *     in the form `<operator>:<datetime>`. The following operators are available
                 *     (`lt`=less than, `lte`=less than or equal to, `gt`=greater than, `gte`=greater than or equal to).
                 *     If you omit the operator, then it is assumed the operator is 'equal to'.
                 *     In this case you may only supply one date. The dates must also be in a valid ISO 8601 format.
                 *     Dates may include a UTC offset. If the offset is omitted, the timezone is assumed to be UTC.
                 *      */
                created_at?: string[];
                /** @description The UUID of the user that modified an object */
                modified_by?: (string)[];
                /** @description
                 *     A date or dates (max 2) to filter objects by. Dates may contain operator prefixes,
                 *     in the form `<operator>:<datetime>`. The following operators are available
                 *     (`lt`=less than, `lte`=less than or equal to, `gt`=greater than, `gte`=greater than or equal to).
                 *     If you omit the operator, then it is assumed the operator is 'equal to'.
                 *     In this case you may only supply one date. The dates must also be in a valid ISO 8601 format.
                 *     Dates may include a UTC offset. If the offset is omitted, the timezone is assumed to be UTC.
                 *      */
                modified_at?: string[];
                /** @description The name of the object to filter on. For backwards compatibility, when no operators are supplied, this will perform a case sensitive prefix match of the object file name. The query `object_name=gold` will match an object with the name `goldcolumns.json`. Providing an operator will query over the entire path to and including the file name. */
                object_name?: string[];
                /** @description The type of schema you want to filter by. */
                schema_id?: string[];
                /** @description The UUID of the user that deleted an object */
                deleted_by?: (string)[];
                /** @description
                 *     A date or dates (max 2) to filter objects by. Dates may contain operator prefixes,
                 *     in the form `<operator>:<datetime>`. The following operators are available
                 *     (`lt`=less than, `lte`=less than or equal to, `gt`=greater than, `gte`=greater than or equal to).
                 *     If you omit the operator, then it is assumed the operator is 'equal to'.
                 *     In this case you may only supply one date. The dates must also be in a valid ISO 8601 format.
                 *     Dates may include a UTC offset. If the offset is omitted, the timezone is assumed to be UTC.
                 *      */
                deleted_at?: string[];
                /** @description The coordinates of the data to spatially search on. The value may optionally include one of two spatial operators, `geowithin` or `geointersects`. If an operator is not defined, then `geointersects` will be used by default. The coordinates must be 5 pairs of longitude and latitude, representing a closed polygon. The first and last coordinates must be the same to close the polygon. */
                geojson_bounding_box?: string[];
            };
            header?: never;
            path: {
                /** @description The customer's organisation ID */
                org_id: string;
                workspace_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ListObjectsResponse"];
                };
            };
            /** @description
             *     #### /geoscienceobject/bad-request
             *
             *     Bad request. The server cannot or will not process the request due to a client error.
             *
             *      */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestError"];
                };
            };
            /** @description
             *     #### /geoscienceobject/auth/missing-token
             *
             *     Unauthorized. The client request has not been completed as the provided credentials  are invalid.
             *
             *
             *     #### /geoscienceobject/auth/invalid-token
             *
             *     Forbidden. The client credentials are valid but do not permit access to this resource.
             *
             *      */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MissingTokenError"] | components["schemas"]["InvalidTokenError"];
                };
            };
            /** @description
             *     #### /geoscienceobject/filtering/invalid-params
             *
             *     The provided filter parameters are invalid.
             *
             *
             *     #### /geoscienceobject/sorting/invalid-params
             *
             *     The provided sort parameters are invalid.
             *
             *
             *     #### /geoscienceobject/validation
             *
             *     The request was invalid and will not be processed due to a client error.
             *
             *      */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InvalidFilterParams"] | components["schemas"]["InvalidSortParams"] | components["schemas"]["EvoRequestValidationError"];
                };
            };
            /** @description
             *     #### /geoscienceobject/api-errors
             *
             *     A server error has occurred.
             *
             *      */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description
             *     #### /geoscienceobject/objects/storage
             *
             *     Attempting an operation within the object store caused an upstream error.
             *
             *
             *     #### /geoscienceobject/bad-gateway
             *
             *     Bad gateway. A response required to handle the request is invalid.
             *
             *      */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ObjectStoreError"] | components["schemas"]["BadGateway"];
                };
            };
        };
    };
    listObjectVersionIDs: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description The customer's organisation ID */
                org_id: string;
                workspace_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": string[];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LatestObjectVersionIdResponse"][];
                };
            };
            /** @description
             *     #### /geoscienceobject/bad-request
             *
             *     Bad request. The server cannot or will not process the request due to a client error.
             *
             *      */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BadRequestError"];
                };
            };
            /** @description
             *     #### /geoscienceobject/auth/missing-token
             *
             *     Unauthorized. The client request has not been completed as the provided credentials  are invalid.
             *
             *
             *     #### /geoscienceobject/auth/invalid-token
             *
             *     Forbidden. The client credentials are valid but do not permit access to this resource.
             *
             *      */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MissingTokenError"] | components["schemas"]["InvalidTokenError"];
                };
            };
            /** @description
             *     #### /geoscienceobject/validation
             *
             *     The request was invalid and will not be processed due to a client error.
             *
             *      */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EvoRequestValidationError"];
                };
            };
            /** @description
             *     #### /geoscienceobject/api-errors
             *
             *     A server error has occurred.
             *
             *      */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiError"];
                };
            };
            /** @description
             *     #### /geoscienceobject/objects/storage
             *
             *     Attempting an operation within the object store caused an upstream error.
             *
             *
             *     #### /geoscienceobject/bad-gateway
             *
             *     Bad gateway. A response required to handle the request is invalid.
             *
             *      */
            502: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ObjectStoreError"] | components["schemas"]["BadGateway"];
                };
            };
        };
    };
    updateMetadata: {
        parameters: {
            query?: {
                /** @description The version of the object to retrieve. Defaults to the latest version if not specified. */
                version_id?: number;
            };
            header?: never;
            path: {
                object_id: string;
                /** @description The customer's organisation ID */
                org_id: string;
                workspace_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MetadataUpdateBody"];
            };
        };
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
}
